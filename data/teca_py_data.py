# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
TECA data module

This module provides high-level data structures that
are produced and consumed by teca_algorithms such as
Cartesian meshes, AMR datasets, and tables.

"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_teca_py_data', [dirname(__file__)])
        except ImportError:
            import _teca_py_data
            return _teca_py_data
        if fp is not None:
            try:
                _mod = imp.load_module('_teca_py_data', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _teca_py_data = swig_import_helper()
    del swig_import_helper
else:
    import _teca_py_data
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_teca_py_data.SHARED_PTR_DISOWN_swigconstant(_teca_py_data)
SHARED_PTR_DISOWN = _teca_py_data.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_data.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _teca_py_data.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _teca_py_data.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters:
            n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _teca_py_data.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _teca_py_data.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _teca_py_data.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters:
            self: swig::SwigPyIterator const *

        """
        return _teca_py_data.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _teca_py_data.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _teca_py_data.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters:
            self: swig::SwigPyIterator *

        """
        return _teca_py_data.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _teca_py_data.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _teca_py_data.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _teca_py_data.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _teca_py_data.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _teca_py_data.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        """
        return _teca_py_data.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters:
            n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters:
            x: swig::SwigPyIterator const &

        """
        return _teca_py_data.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _teca_py_data.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class std_vector_char(_object):
    """Proxy of C++ std::vector<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_char, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_char self) -> SwigPyIterator

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_char self) -> bool

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_char self) -> bool

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_char self) -> std::vector< char >::size_type

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char___len__(self)


    def pop(self):
        """
        pop(std_vector_char self) -> std::vector< char >::value_type

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j) -> std_vector_char

        Parameters:
            i: std::vector< char >::difference_type
            j: std::vector< char >::difference_type

        """
        return _teca_py_data.std_vector_char___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j, std_vector_char v)

        Parameters:
            i: std::vector< char >::difference_type
            j: std::vector< char >::difference_type
            v: std::vector< char,std::allocator< char > > const &

        __setslice__(std_vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)

        Parameters:
            i: std::vector< char >::difference_type
            j: std::vector< char >::difference_type

        """
        return _teca_py_data.std_vector_char___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_char self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)

        Parameters:
            i: std::vector< char >::difference_type
            j: std::vector< char >::difference_type

        """
        return _teca_py_data.std_vector_char___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_char self, std::vector< char >::difference_type i)

        Parameters:
            i: std::vector< char >::difference_type

        __delitem__(std_vector_char self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_char___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_char self, PySliceObject * slice) -> std_vector_char

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_char self, std::vector< char >::difference_type i) -> std::vector< char >::value_type const &

        Parameters:
            i: std::vector< char >::difference_type

        """
        return _teca_py_data.std_vector_char___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_char self, PySliceObject * slice, std_vector_char v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< char,std::allocator< char > > const &

        __setitem__(std_vector_char self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_char self, std::vector< char >::difference_type i, std::vector< char >::value_type const & x)

        Parameters:
            i: std::vector< char >::difference_type
            x: std::vector< char >::value_type const &

        """
        return _teca_py_data.std_vector_char___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_char self, std::vector< char >::value_type const & x)

        Parameters:
            x: std::vector< char >::value_type const &

        """
        return _teca_py_data.std_vector_char_append(self, x)


    def empty(self):
        """
        empty(std_vector_char self) -> bool

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char_empty(self)


    def size(self):
        """
        size(std_vector_char self) -> std::vector< char >::size_type

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char_size(self)


    def clear(self):
        """
        clear(std_vector_char self)

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_clear(self)


    def swap(self, v):
        """
        swap(std_vector_char self, std_vector_char v)

        Parameters:
            v: std::vector< char > &

        """
        return _teca_py_data.std_vector_char_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_char self) -> std::vector< char >::allocator_type

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_char self) -> std::vector< char >::iterator

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_begin(self)


    def end(self):
        """
        end(std_vector_char self) -> std::vector< char >::iterator

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_char self) -> std::vector< char >::reverse_iterator

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_rbegin(self)


    def rend(self):
        """
        rend(std_vector_char self) -> std::vector< char >::reverse_iterator

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_char self)

        Parameters:
            self: std::vector< char > *

        """
        return _teca_py_data.std_vector_char_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_char self, std::vector< char >::iterator pos) -> std::vector< char >::iterator

        Parameters:
            pos: std::vector< char >::iterator

        erase(std_vector_char self, std::vector< char >::iterator first, std::vector< char >::iterator last) -> std::vector< char >::iterator

        Parameters:
            first: std::vector< char >::iterator
            last: std::vector< char >::iterator

        """
        return _teca_py_data.std_vector_char_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(char)> self) -> std_vector_char
        __init__(std::vector<(char)> self, std_vector_char arg2) -> std_vector_char

        Parameters:
            arg2: std::vector< char > const &

        __init__(std::vector<(char)> self, std::vector< char >::size_type size) -> std_vector_char

        Parameters:
            size: std::vector< char >::size_type

        __init__(std::vector<(char)> self, std::vector< char >::size_type size, std::vector< char >::value_type const & value) -> std_vector_char

        Parameters:
            size: std::vector< char >::size_type
            value: std::vector< char >::value_type const &

        """
        this = _teca_py_data.new_std_vector_char(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_char self, std::vector< char >::value_type const & x)

        Parameters:
            x: std::vector< char >::value_type const &

        """
        return _teca_py_data.std_vector_char_push_back(self, x)


    def front(self):
        """
        front(std_vector_char self) -> std::vector< char >::value_type const &

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char_front(self)


    def back(self):
        """
        back(std_vector_char self) -> std::vector< char >::value_type const &

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_char self, std::vector< char >::size_type n, std::vector< char >::value_type const & x)

        Parameters:
            n: std::vector< char >::size_type
            x: std::vector< char >::value_type const &

        """
        return _teca_py_data.std_vector_char_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_char self, std::vector< char >::size_type new_size)

        Parameters:
            new_size: std::vector< char >::size_type

        resize(std_vector_char self, std::vector< char >::size_type new_size, std::vector< char >::value_type const & x)

        Parameters:
            new_size: std::vector< char >::size_type
            x: std::vector< char >::value_type const &

        """
        return _teca_py_data.std_vector_char_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_char self, std::vector< char >::iterator pos, std::vector< char >::value_type const & x) -> std::vector< char >::iterator

        Parameters:
            pos: std::vector< char >::iterator
            x: std::vector< char >::value_type const &

        insert(std_vector_char self, std::vector< char >::iterator pos, std::vector< char >::size_type n, std::vector< char >::value_type const & x)

        Parameters:
            pos: std::vector< char >::iterator
            n: std::vector< char >::size_type
            x: std::vector< char >::value_type const &

        """
        return _teca_py_data.std_vector_char_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_char self, std::vector< char >::size_type n)

        Parameters:
            n: std::vector< char >::size_type

        """
        return _teca_py_data.std_vector_char_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_char self) -> std::vector< char >::size_type

        Parameters:
            self: std::vector< char > const *

        """
        return _teca_py_data.std_vector_char_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_char
    __del__ = lambda self: None
std_vector_char_swigregister = _teca_py_data.std_vector_char_swigregister
std_vector_char_swigregister(std_vector_char)

class std_vector_uchar(_object):
    """Proxy of C++ std::vector<(unsigned char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_uchar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_uchar, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_uchar self) -> SwigPyIterator

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_uchar self) -> bool

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_uchar self) -> bool

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_uchar self) -> std::vector< unsigned char >::size_type

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar___len__(self)


    def pop(self):
        """
        pop(std_vector_uchar self) -> std::vector< unsigned char >::value_type

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_uchar self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> std_vector_uchar

        Parameters:
            i: std::vector< unsigned char >::difference_type
            j: std::vector< unsigned char >::difference_type

        """
        return _teca_py_data.std_vector_uchar___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_uchar self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, std_vector_uchar v)

        Parameters:
            i: std::vector< unsigned char >::difference_type
            j: std::vector< unsigned char >::difference_type
            v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        __setslice__(std_vector_uchar self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)

        Parameters:
            i: std::vector< unsigned char >::difference_type
            j: std::vector< unsigned char >::difference_type

        """
        return _teca_py_data.std_vector_uchar___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_uchar self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)

        Parameters:
            i: std::vector< unsigned char >::difference_type
            j: std::vector< unsigned char >::difference_type

        """
        return _teca_py_data.std_vector_uchar___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_uchar self, std::vector< unsigned char >::difference_type i)

        Parameters:
            i: std::vector< unsigned char >::difference_type

        __delitem__(std_vector_uchar self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_uchar___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_uchar self, PySliceObject * slice) -> std_vector_uchar

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_uchar self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &

        Parameters:
            i: std::vector< unsigned char >::difference_type

        """
        return _teca_py_data.std_vector_uchar___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_uchar self, PySliceObject * slice, std_vector_uchar v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        __setitem__(std_vector_uchar self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_uchar self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)

        Parameters:
            i: std::vector< unsigned char >::difference_type
            x: std::vector< unsigned char >::value_type const &

        """
        return _teca_py_data.std_vector_uchar___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_uchar self, std::vector< unsigned char >::value_type const & x)

        Parameters:
            x: std::vector< unsigned char >::value_type const &

        """
        return _teca_py_data.std_vector_uchar_append(self, x)


    def empty(self):
        """
        empty(std_vector_uchar self) -> bool

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar_empty(self)


    def size(self):
        """
        size(std_vector_uchar self) -> std::vector< unsigned char >::size_type

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar_size(self)


    def clear(self):
        """
        clear(std_vector_uchar self)

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_clear(self)


    def swap(self, v):
        """
        swap(std_vector_uchar self, std_vector_uchar v)

        Parameters:
            v: std::vector< unsigned char > &

        """
        return _teca_py_data.std_vector_uchar_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_uchar self) -> std::vector< unsigned char >::allocator_type

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_uchar self) -> std::vector< unsigned char >::iterator

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_begin(self)


    def end(self):
        """
        end(std_vector_uchar self) -> std::vector< unsigned char >::iterator

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_uchar self) -> std::vector< unsigned char >::reverse_iterator

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_rbegin(self)


    def rend(self):
        """
        rend(std_vector_uchar self) -> std::vector< unsigned char >::reverse_iterator

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_uchar self)

        Parameters:
            self: std::vector< unsigned char > *

        """
        return _teca_py_data.std_vector_uchar_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_uchar self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator

        Parameters:
            pos: std::vector< unsigned char >::iterator

        erase(std_vector_uchar self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator

        Parameters:
            first: std::vector< unsigned char >::iterator
            last: std::vector< unsigned char >::iterator

        """
        return _teca_py_data.std_vector_uchar_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned char)> self) -> std_vector_uchar
        __init__(std::vector<(unsigned char)> self, std_vector_uchar arg2) -> std_vector_uchar

        Parameters:
            arg2: std::vector< unsigned char > const &

        __init__(std::vector<(unsigned char)> self, std::vector< unsigned char >::size_type size) -> std_vector_uchar

        Parameters:
            size: std::vector< unsigned char >::size_type

        __init__(std::vector<(unsigned char)> self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> std_vector_uchar

        Parameters:
            size: std::vector< unsigned char >::size_type
            value: std::vector< unsigned char >::value_type const &

        """
        this = _teca_py_data.new_std_vector_uchar(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_uchar self, std::vector< unsigned char >::value_type const & x)

        Parameters:
            x: std::vector< unsigned char >::value_type const &

        """
        return _teca_py_data.std_vector_uchar_push_back(self, x)


    def front(self):
        """
        front(std_vector_uchar self) -> std::vector< unsigned char >::value_type const &

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar_front(self)


    def back(self):
        """
        back(std_vector_uchar self) -> std::vector< unsigned char >::value_type const &

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_uchar self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)

        Parameters:
            n: std::vector< unsigned char >::size_type
            x: std::vector< unsigned char >::value_type const &

        """
        return _teca_py_data.std_vector_uchar_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_uchar self, std::vector< unsigned char >::size_type new_size)

        Parameters:
            new_size: std::vector< unsigned char >::size_type

        resize(std_vector_uchar self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)

        Parameters:
            new_size: std::vector< unsigned char >::size_type
            x: std::vector< unsigned char >::value_type const &

        """
        return _teca_py_data.std_vector_uchar_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_uchar self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator

        Parameters:
            pos: std::vector< unsigned char >::iterator
            x: std::vector< unsigned char >::value_type const &

        insert(std_vector_uchar self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)

        Parameters:
            pos: std::vector< unsigned char >::iterator
            n: std::vector< unsigned char >::size_type
            x: std::vector< unsigned char >::value_type const &

        """
        return _teca_py_data.std_vector_uchar_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_uchar self, std::vector< unsigned char >::size_type n)

        Parameters:
            n: std::vector< unsigned char >::size_type

        """
        return _teca_py_data.std_vector_uchar_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_uchar self) -> std::vector< unsigned char >::size_type

        Parameters:
            self: std::vector< unsigned char > const *

        """
        return _teca_py_data.std_vector_uchar_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_uchar
    __del__ = lambda self: None
std_vector_uchar_swigregister = _teca_py_data.std_vector_uchar_swigregister
std_vector_uchar_swigregister(std_vector_uchar)

class std_vector_int(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_int self) -> SwigPyIterator

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_int self) -> bool

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_int self) -> bool

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_int self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int___len__(self)


    def pop(self):
        """
        pop(std_vector_int self) -> std::vector< int >::value_type

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> std_vector_int

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type

        """
        return _teca_py_data.std_vector_int___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, std_vector_int v)

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type
            v: std::vector< int,std::allocator< int > > const &

        __setslice__(std_vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type

        """
        return _teca_py_data.std_vector_int___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters:
            i: std::vector< int >::difference_type
            j: std::vector< int >::difference_type

        """
        return _teca_py_data.std_vector_int___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_int self, std::vector< int >::difference_type i)

        Parameters:
            i: std::vector< int >::difference_type

        __delitem__(std_vector_int self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_int___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_int self, PySliceObject * slice) -> std_vector_int

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters:
            i: std::vector< int >::difference_type

        """
        return _teca_py_data.std_vector_int___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_int self, PySliceObject * slice, std_vector_int v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< int,std::allocator< int > > const &

        __setitem__(std_vector_int self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters:
            i: std::vector< int >::difference_type
            x: std::vector< int >::value_type const &

        """
        return _teca_py_data.std_vector_int___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_int self, std::vector< int >::value_type const & x)

        Parameters:
            x: std::vector< int >::value_type const &

        """
        return _teca_py_data.std_vector_int_append(self, x)


    def empty(self):
        """
        empty(std_vector_int self) -> bool

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int_empty(self)


    def size(self):
        """
        size(std_vector_int self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int_size(self)


    def clear(self):
        """
        clear(std_vector_int self)

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_clear(self)


    def swap(self, v):
        """
        swap(std_vector_int self, std_vector_int v)

        Parameters:
            v: std::vector< int > &

        """
        return _teca_py_data.std_vector_int_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_int self) -> std::vector< int >::allocator_type

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_int self) -> std::vector< int >::iterator

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_begin(self)


    def end(self):
        """
        end(std_vector_int self) -> std::vector< int >::iterator

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_int self) -> std::vector< int >::reverse_iterator

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_rbegin(self)


    def rend(self):
        """
        rend(std_vector_int self) -> std::vector< int >::reverse_iterator

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_int self)

        Parameters:
            self: std::vector< int > *

        """
        return _teca_py_data.std_vector_int_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters:
            pos: std::vector< int >::iterator

        erase(std_vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters:
            first: std::vector< int >::iterator
            last: std::vector< int >::iterator

        """
        return _teca_py_data.std_vector_int_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> std_vector_int
        __init__(std::vector<(int)> self, std_vector_int arg2) -> std_vector_int

        Parameters:
            arg2: std::vector< int > const &

        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> std_vector_int

        Parameters:
            size: std::vector< int >::size_type

        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> std_vector_int

        Parameters:
            size: std::vector< int >::size_type
            value: std::vector< int >::value_type const &

        """
        this = _teca_py_data.new_std_vector_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_int self, std::vector< int >::value_type const & x)

        Parameters:
            x: std::vector< int >::value_type const &

        """
        return _teca_py_data.std_vector_int_push_back(self, x)


    def front(self):
        """
        front(std_vector_int self) -> std::vector< int >::value_type const &

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int_front(self)


    def back(self):
        """
        back(std_vector_int self) -> std::vector< int >::value_type const &

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters:
            n: std::vector< int >::size_type
            x: std::vector< int >::value_type const &

        """
        return _teca_py_data.std_vector_int_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_int self, std::vector< int >::size_type new_size)

        Parameters:
            new_size: std::vector< int >::size_type

        resize(std_vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters:
            new_size: std::vector< int >::size_type
            x: std::vector< int >::value_type const &

        """
        return _teca_py_data.std_vector_int_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters:
            pos: std::vector< int >::iterator
            x: std::vector< int >::value_type const &

        insert(std_vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters:
            pos: std::vector< int >::iterator
            n: std::vector< int >::size_type
            x: std::vector< int >::value_type const &

        """
        return _teca_py_data.std_vector_int_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_int self, std::vector< int >::size_type n)

        Parameters:
            n: std::vector< int >::size_type

        """
        return _teca_py_data.std_vector_int_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_int self) -> std::vector< int >::size_type

        Parameters:
            self: std::vector< int > const *

        """
        return _teca_py_data.std_vector_int_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_int
    __del__ = lambda self: None
std_vector_int_swigregister = _teca_py_data.std_vector_int_swigregister
std_vector_int_swigregister(std_vector_int)

class std_vector_uint(_object):
    """Proxy of C++ std::vector<(unsigned int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_uint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_uint, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_uint self) -> SwigPyIterator

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_uint self) -> bool

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_uint self) -> bool

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_uint self) -> std::vector< unsigned int >::size_type

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint___len__(self)


    def pop(self):
        """
        pop(std_vector_uint self) -> std::vector< unsigned int >::value_type

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_uint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> std_vector_uint

        Parameters:
            i: std::vector< unsigned int >::difference_type
            j: std::vector< unsigned int >::difference_type

        """
        return _teca_py_data.std_vector_uint___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_uint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, std_vector_uint v)

        Parameters:
            i: std::vector< unsigned int >::difference_type
            j: std::vector< unsigned int >::difference_type
            v: std::vector< unsigned int,std::allocator< unsigned int > > const &

        __setslice__(std_vector_uint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)

        Parameters:
            i: std::vector< unsigned int >::difference_type
            j: std::vector< unsigned int >::difference_type

        """
        return _teca_py_data.std_vector_uint___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_uint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)

        Parameters:
            i: std::vector< unsigned int >::difference_type
            j: std::vector< unsigned int >::difference_type

        """
        return _teca_py_data.std_vector_uint___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_uint self, std::vector< unsigned int >::difference_type i)

        Parameters:
            i: std::vector< unsigned int >::difference_type

        __delitem__(std_vector_uint self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_uint___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_uint self, PySliceObject * slice) -> std_vector_uint

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_uint self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &

        Parameters:
            i: std::vector< unsigned int >::difference_type

        """
        return _teca_py_data.std_vector_uint___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_uint self, PySliceObject * slice, std_vector_uint v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< unsigned int,std::allocator< unsigned int > > const &

        __setitem__(std_vector_uint self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_uint self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)

        Parameters:
            i: std::vector< unsigned int >::difference_type
            x: std::vector< unsigned int >::value_type const &

        """
        return _teca_py_data.std_vector_uint___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_uint self, std::vector< unsigned int >::value_type const & x)

        Parameters:
            x: std::vector< unsigned int >::value_type const &

        """
        return _teca_py_data.std_vector_uint_append(self, x)


    def empty(self):
        """
        empty(std_vector_uint self) -> bool

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint_empty(self)


    def size(self):
        """
        size(std_vector_uint self) -> std::vector< unsigned int >::size_type

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint_size(self)


    def clear(self):
        """
        clear(std_vector_uint self)

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_clear(self)


    def swap(self, v):
        """
        swap(std_vector_uint self, std_vector_uint v)

        Parameters:
            v: std::vector< unsigned int > &

        """
        return _teca_py_data.std_vector_uint_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_uint self) -> std::vector< unsigned int >::allocator_type

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_uint self) -> std::vector< unsigned int >::iterator

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_begin(self)


    def end(self):
        """
        end(std_vector_uint self) -> std::vector< unsigned int >::iterator

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_uint self) -> std::vector< unsigned int >::reverse_iterator

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_rbegin(self)


    def rend(self):
        """
        rend(std_vector_uint self) -> std::vector< unsigned int >::reverse_iterator

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_uint self)

        Parameters:
            self: std::vector< unsigned int > *

        """
        return _teca_py_data.std_vector_uint_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_uint self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator

        Parameters:
            pos: std::vector< unsigned int >::iterator

        erase(std_vector_uint self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator

        Parameters:
            first: std::vector< unsigned int >::iterator
            last: std::vector< unsigned int >::iterator

        """
        return _teca_py_data.std_vector_uint_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned int)> self) -> std_vector_uint
        __init__(std::vector<(unsigned int)> self, std_vector_uint arg2) -> std_vector_uint

        Parameters:
            arg2: std::vector< unsigned int > const &

        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size) -> std_vector_uint

        Parameters:
            size: std::vector< unsigned int >::size_type

        __init__(std::vector<(unsigned int)> self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> std_vector_uint

        Parameters:
            size: std::vector< unsigned int >::size_type
            value: std::vector< unsigned int >::value_type const &

        """
        this = _teca_py_data.new_std_vector_uint(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_uint self, std::vector< unsigned int >::value_type const & x)

        Parameters:
            x: std::vector< unsigned int >::value_type const &

        """
        return _teca_py_data.std_vector_uint_push_back(self, x)


    def front(self):
        """
        front(std_vector_uint self) -> std::vector< unsigned int >::value_type const &

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint_front(self)


    def back(self):
        """
        back(std_vector_uint self) -> std::vector< unsigned int >::value_type const &

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_uint self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)

        Parameters:
            n: std::vector< unsigned int >::size_type
            x: std::vector< unsigned int >::value_type const &

        """
        return _teca_py_data.std_vector_uint_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_uint self, std::vector< unsigned int >::size_type new_size)

        Parameters:
            new_size: std::vector< unsigned int >::size_type

        resize(std_vector_uint self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)

        Parameters:
            new_size: std::vector< unsigned int >::size_type
            x: std::vector< unsigned int >::value_type const &

        """
        return _teca_py_data.std_vector_uint_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_uint self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator

        Parameters:
            pos: std::vector< unsigned int >::iterator
            x: std::vector< unsigned int >::value_type const &

        insert(std_vector_uint self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)

        Parameters:
            pos: std::vector< unsigned int >::iterator
            n: std::vector< unsigned int >::size_type
            x: std::vector< unsigned int >::value_type const &

        """
        return _teca_py_data.std_vector_uint_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_uint self, std::vector< unsigned int >::size_type n)

        Parameters:
            n: std::vector< unsigned int >::size_type

        """
        return _teca_py_data.std_vector_uint_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_uint self) -> std::vector< unsigned int >::size_type

        Parameters:
            self: std::vector< unsigned int > const *

        """
        return _teca_py_data.std_vector_uint_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_uint
    __del__ = lambda self: None
std_vector_uint_swigregister = _teca_py_data.std_vector_uint_swigregister
std_vector_uint_swigregister(std_vector_uint)

class std_vector_long_long(_object):
    """Proxy of C++ std::vector<(long long)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_long_long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_long_long, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_long_long self) -> SwigPyIterator

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_long_long self) -> bool

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_long_long self) -> bool

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_long_long self) -> std::vector< long long >::size_type

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long___len__(self)


    def pop(self):
        """
        pop(std_vector_long_long self) -> std::vector< long long >::value_type

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_long_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j) -> std_vector_long_long

        Parameters:
            i: std::vector< long long >::difference_type
            j: std::vector< long long >::difference_type

        """
        return _teca_py_data.std_vector_long_long___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_long_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j, std_vector_long_long v)

        Parameters:
            i: std::vector< long long >::difference_type
            j: std::vector< long long >::difference_type
            v: std::vector< long long,std::allocator< long long > > const &

        __setslice__(std_vector_long_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)

        Parameters:
            i: std::vector< long long >::difference_type
            j: std::vector< long long >::difference_type

        """
        return _teca_py_data.std_vector_long_long___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_long_long self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)

        Parameters:
            i: std::vector< long long >::difference_type
            j: std::vector< long long >::difference_type

        """
        return _teca_py_data.std_vector_long_long___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_long_long self, std::vector< long long >::difference_type i)

        Parameters:
            i: std::vector< long long >::difference_type

        __delitem__(std_vector_long_long self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_long_long___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_long_long self, PySliceObject * slice) -> std_vector_long_long

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_long_long self, std::vector< long long >::difference_type i) -> std::vector< long long >::value_type const &

        Parameters:
            i: std::vector< long long >::difference_type

        """
        return _teca_py_data.std_vector_long_long___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_long_long self, PySliceObject * slice, std_vector_long_long v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< long long,std::allocator< long long > > const &

        __setitem__(std_vector_long_long self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_long_long self, std::vector< long long >::difference_type i, std::vector< long long >::value_type const & x)

        Parameters:
            i: std::vector< long long >::difference_type
            x: std::vector< long long >::value_type const &

        """
        return _teca_py_data.std_vector_long_long___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_long_long self, std::vector< long long >::value_type const & x)

        Parameters:
            x: std::vector< long long >::value_type const &

        """
        return _teca_py_data.std_vector_long_long_append(self, x)


    def empty(self):
        """
        empty(std_vector_long_long self) -> bool

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long_empty(self)


    def size(self):
        """
        size(std_vector_long_long self) -> std::vector< long long >::size_type

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long_size(self)


    def clear(self):
        """
        clear(std_vector_long_long self)

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_clear(self)


    def swap(self, v):
        """
        swap(std_vector_long_long self, std_vector_long_long v)

        Parameters:
            v: std::vector< long long > &

        """
        return _teca_py_data.std_vector_long_long_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_long_long self) -> std::vector< long long >::allocator_type

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_long_long self) -> std::vector< long long >::iterator

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_begin(self)


    def end(self):
        """
        end(std_vector_long_long self) -> std::vector< long long >::iterator

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_long_long self) -> std::vector< long long >::reverse_iterator

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_rbegin(self)


    def rend(self):
        """
        rend(std_vector_long_long self) -> std::vector< long long >::reverse_iterator

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_long_long self)

        Parameters:
            self: std::vector< long long > *

        """
        return _teca_py_data.std_vector_long_long_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_long_long self, std::vector< long long >::iterator pos) -> std::vector< long long >::iterator

        Parameters:
            pos: std::vector< long long >::iterator

        erase(std_vector_long_long self, std::vector< long long >::iterator first, std::vector< long long >::iterator last) -> std::vector< long long >::iterator

        Parameters:
            first: std::vector< long long >::iterator
            last: std::vector< long long >::iterator

        """
        return _teca_py_data.std_vector_long_long_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(long long)> self) -> std_vector_long_long
        __init__(std::vector<(long long)> self, std_vector_long_long arg2) -> std_vector_long_long

        Parameters:
            arg2: std::vector< long long > const &

        __init__(std::vector<(long long)> self, std::vector< long long >::size_type size) -> std_vector_long_long

        Parameters:
            size: std::vector< long long >::size_type

        __init__(std::vector<(long long)> self, std::vector< long long >::size_type size, std::vector< long long >::value_type const & value) -> std_vector_long_long

        Parameters:
            size: std::vector< long long >::size_type
            value: std::vector< long long >::value_type const &

        """
        this = _teca_py_data.new_std_vector_long_long(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_long_long self, std::vector< long long >::value_type const & x)

        Parameters:
            x: std::vector< long long >::value_type const &

        """
        return _teca_py_data.std_vector_long_long_push_back(self, x)


    def front(self):
        """
        front(std_vector_long_long self) -> std::vector< long long >::value_type const &

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long_front(self)


    def back(self):
        """
        back(std_vector_long_long self) -> std::vector< long long >::value_type const &

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_long_long self, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)

        Parameters:
            n: std::vector< long long >::size_type
            x: std::vector< long long >::value_type const &

        """
        return _teca_py_data.std_vector_long_long_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_long_long self, std::vector< long long >::size_type new_size)

        Parameters:
            new_size: std::vector< long long >::size_type

        resize(std_vector_long_long self, std::vector< long long >::size_type new_size, std::vector< long long >::value_type const & x)

        Parameters:
            new_size: std::vector< long long >::size_type
            x: std::vector< long long >::value_type const &

        """
        return _teca_py_data.std_vector_long_long_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_long_long self, std::vector< long long >::iterator pos, std::vector< long long >::value_type const & x) -> std::vector< long long >::iterator

        Parameters:
            pos: std::vector< long long >::iterator
            x: std::vector< long long >::value_type const &

        insert(std_vector_long_long self, std::vector< long long >::iterator pos, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)

        Parameters:
            pos: std::vector< long long >::iterator
            n: std::vector< long long >::size_type
            x: std::vector< long long >::value_type const &

        """
        return _teca_py_data.std_vector_long_long_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_long_long self, std::vector< long long >::size_type n)

        Parameters:
            n: std::vector< long long >::size_type

        """
        return _teca_py_data.std_vector_long_long_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_long_long self) -> std::vector< long long >::size_type

        Parameters:
            self: std::vector< long long > const *

        """
        return _teca_py_data.std_vector_long_long_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_long_long
    __del__ = lambda self: None
std_vector_long_long_swigregister = _teca_py_data.std_vector_long_long_swigregister
std_vector_long_long_swigregister(std_vector_long_long)

class std_vector_ulong_long(_object):
    """Proxy of C++ std::vector<(unsigned long long)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_ulong_long, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_ulong_long, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_ulong_long self) -> SwigPyIterator

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_ulong_long self) -> bool

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_ulong_long self) -> bool

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_ulong_long self) -> std::vector< unsigned long long >::size_type

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long___len__(self)


    def pop(self):
        """
        pop(std_vector_ulong_long self) -> std::vector< unsigned long long >::value_type

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_ulong_long self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j) -> std_vector_ulong_long

        Parameters:
            i: std::vector< unsigned long long >::difference_type
            j: std::vector< unsigned long long >::difference_type

        """
        return _teca_py_data.std_vector_ulong_long___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_ulong_long self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j, std_vector_ulong_long v)

        Parameters:
            i: std::vector< unsigned long long >::difference_type
            j: std::vector< unsigned long long >::difference_type
            v: std::vector< unsigned long long,std::allocator< unsigned long long > > const &

        __setslice__(std_vector_ulong_long self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j)

        Parameters:
            i: std::vector< unsigned long long >::difference_type
            j: std::vector< unsigned long long >::difference_type

        """
        return _teca_py_data.std_vector_ulong_long___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_ulong_long self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::difference_type j)

        Parameters:
            i: std::vector< unsigned long long >::difference_type
            j: std::vector< unsigned long long >::difference_type

        """
        return _teca_py_data.std_vector_ulong_long___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_ulong_long self, std::vector< unsigned long long >::difference_type i)

        Parameters:
            i: std::vector< unsigned long long >::difference_type

        __delitem__(std_vector_ulong_long self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_ulong_long___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_ulong_long self, PySliceObject * slice) -> std_vector_ulong_long

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_ulong_long self, std::vector< unsigned long long >::difference_type i) -> std::vector< unsigned long long >::value_type const &

        Parameters:
            i: std::vector< unsigned long long >::difference_type

        """
        return _teca_py_data.std_vector_ulong_long___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_ulong_long self, PySliceObject * slice, std_vector_ulong_long v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< unsigned long long,std::allocator< unsigned long long > > const &

        __setitem__(std_vector_ulong_long self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_ulong_long self, std::vector< unsigned long long >::difference_type i, std::vector< unsigned long long >::value_type const & x)

        Parameters:
            i: std::vector< unsigned long long >::difference_type
            x: std::vector< unsigned long long >::value_type const &

        """
        return _teca_py_data.std_vector_ulong_long___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_ulong_long self, std::vector< unsigned long long >::value_type const & x)

        Parameters:
            x: std::vector< unsigned long long >::value_type const &

        """
        return _teca_py_data.std_vector_ulong_long_append(self, x)


    def empty(self):
        """
        empty(std_vector_ulong_long self) -> bool

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long_empty(self)


    def size(self):
        """
        size(std_vector_ulong_long self) -> std::vector< unsigned long long >::size_type

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long_size(self)


    def clear(self):
        """
        clear(std_vector_ulong_long self)

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_clear(self)


    def swap(self, v):
        """
        swap(std_vector_ulong_long self, std_vector_ulong_long v)

        Parameters:
            v: std::vector< unsigned long long > &

        """
        return _teca_py_data.std_vector_ulong_long_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_ulong_long self) -> std::vector< unsigned long long >::allocator_type

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_ulong_long self) -> std::vector< unsigned long long >::iterator

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_begin(self)


    def end(self):
        """
        end(std_vector_ulong_long self) -> std::vector< unsigned long long >::iterator

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_ulong_long self) -> std::vector< unsigned long long >::reverse_iterator

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_rbegin(self)


    def rend(self):
        """
        rend(std_vector_ulong_long self) -> std::vector< unsigned long long >::reverse_iterator

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_ulong_long self)

        Parameters:
            self: std::vector< unsigned long long > *

        """
        return _teca_py_data.std_vector_ulong_long_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_ulong_long self, std::vector< unsigned long long >::iterator pos) -> std::vector< unsigned long long >::iterator

        Parameters:
            pos: std::vector< unsigned long long >::iterator

        erase(std_vector_ulong_long self, std::vector< unsigned long long >::iterator first, std::vector< unsigned long long >::iterator last) -> std::vector< unsigned long long >::iterator

        Parameters:
            first: std::vector< unsigned long long >::iterator
            last: std::vector< unsigned long long >::iterator

        """
        return _teca_py_data.std_vector_ulong_long_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(unsigned long long)> self) -> std_vector_ulong_long
        __init__(std::vector<(unsigned long long)> self, std_vector_ulong_long arg2) -> std_vector_ulong_long

        Parameters:
            arg2: std::vector< unsigned long long > const &

        __init__(std::vector<(unsigned long long)> self, std::vector< unsigned long long >::size_type size) -> std_vector_ulong_long

        Parameters:
            size: std::vector< unsigned long long >::size_type

        __init__(std::vector<(unsigned long long)> self, std::vector< unsigned long long >::size_type size, std::vector< unsigned long long >::value_type const & value) -> std_vector_ulong_long

        Parameters:
            size: std::vector< unsigned long long >::size_type
            value: std::vector< unsigned long long >::value_type const &

        """
        this = _teca_py_data.new_std_vector_ulong_long(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_ulong_long self, std::vector< unsigned long long >::value_type const & x)

        Parameters:
            x: std::vector< unsigned long long >::value_type const &

        """
        return _teca_py_data.std_vector_ulong_long_push_back(self, x)


    def front(self):
        """
        front(std_vector_ulong_long self) -> std::vector< unsigned long long >::value_type const &

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long_front(self)


    def back(self):
        """
        back(std_vector_ulong_long self) -> std::vector< unsigned long long >::value_type const &

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_ulong_long self, std::vector< unsigned long long >::size_type n, std::vector< unsigned long long >::value_type const & x)

        Parameters:
            n: std::vector< unsigned long long >::size_type
            x: std::vector< unsigned long long >::value_type const &

        """
        return _teca_py_data.std_vector_ulong_long_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_ulong_long self, std::vector< unsigned long long >::size_type new_size)

        Parameters:
            new_size: std::vector< unsigned long long >::size_type

        resize(std_vector_ulong_long self, std::vector< unsigned long long >::size_type new_size, std::vector< unsigned long long >::value_type const & x)

        Parameters:
            new_size: std::vector< unsigned long long >::size_type
            x: std::vector< unsigned long long >::value_type const &

        """
        return _teca_py_data.std_vector_ulong_long_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_ulong_long self, std::vector< unsigned long long >::iterator pos, std::vector< unsigned long long >::value_type const & x) -> std::vector< unsigned long long >::iterator

        Parameters:
            pos: std::vector< unsigned long long >::iterator
            x: std::vector< unsigned long long >::value_type const &

        insert(std_vector_ulong_long self, std::vector< unsigned long long >::iterator pos, std::vector< unsigned long long >::size_type n, std::vector< unsigned long long >::value_type const & x)

        Parameters:
            pos: std::vector< unsigned long long >::iterator
            n: std::vector< unsigned long long >::size_type
            x: std::vector< unsigned long long >::value_type const &

        """
        return _teca_py_data.std_vector_ulong_long_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_ulong_long self, std::vector< unsigned long long >::size_type n)

        Parameters:
            n: std::vector< unsigned long long >::size_type

        """
        return _teca_py_data.std_vector_ulong_long_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_ulong_long self) -> std::vector< unsigned long long >::size_type

        Parameters:
            self: std::vector< unsigned long long > const *

        """
        return _teca_py_data.std_vector_ulong_long_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_ulong_long
    __del__ = lambda self: None
std_vector_ulong_long_swigregister = _teca_py_data.std_vector_ulong_long_swigregister
std_vector_ulong_long_swigregister(std_vector_ulong_long)

class std_vector_float(_object):
    """Proxy of C++ std::vector<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_float, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_float self) -> SwigPyIterator

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_float self) -> bool

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_float self) -> bool

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_float self) -> std::vector< float >::size_type

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float___len__(self)


    def pop(self):
        """
        pop(std_vector_float self) -> std::vector< float >::value_type

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> std_vector_float

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type

        """
        return _teca_py_data.std_vector_float___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, std_vector_float v)

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type
            v: std::vector< float,std::allocator< float > > const &

        __setslice__(std_vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type

        """
        return _teca_py_data.std_vector_float___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_float self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)

        Parameters:
            i: std::vector< float >::difference_type
            j: std::vector< float >::difference_type

        """
        return _teca_py_data.std_vector_float___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_float self, std::vector< float >::difference_type i)

        Parameters:
            i: std::vector< float >::difference_type

        __delitem__(std_vector_float self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_float___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_float self, PySliceObject * slice) -> std_vector_float

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_float self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &

        Parameters:
            i: std::vector< float >::difference_type

        """
        return _teca_py_data.std_vector_float___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_float self, PySliceObject * slice, std_vector_float v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< float,std::allocator< float > > const &

        __setitem__(std_vector_float self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_float self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)

        Parameters:
            i: std::vector< float >::difference_type
            x: std::vector< float >::value_type const &

        """
        return _teca_py_data.std_vector_float___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_float self, std::vector< float >::value_type const & x)

        Parameters:
            x: std::vector< float >::value_type const &

        """
        return _teca_py_data.std_vector_float_append(self, x)


    def empty(self):
        """
        empty(std_vector_float self) -> bool

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float_empty(self)


    def size(self):
        """
        size(std_vector_float self) -> std::vector< float >::size_type

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float_size(self)


    def clear(self):
        """
        clear(std_vector_float self)

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_clear(self)


    def swap(self, v):
        """
        swap(std_vector_float self, std_vector_float v)

        Parameters:
            v: std::vector< float > &

        """
        return _teca_py_data.std_vector_float_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_float self) -> std::vector< float >::allocator_type

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_float self) -> std::vector< float >::iterator

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_begin(self)


    def end(self):
        """
        end(std_vector_float self) -> std::vector< float >::iterator

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_float self) -> std::vector< float >::reverse_iterator

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_rbegin(self)


    def rend(self):
        """
        rend(std_vector_float self) -> std::vector< float >::reverse_iterator

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_float self)

        Parameters:
            self: std::vector< float > *

        """
        return _teca_py_data.std_vector_float_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_float self, std::vector< float >::iterator pos) -> std::vector< float >::iterator

        Parameters:
            pos: std::vector< float >::iterator

        erase(std_vector_float self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator

        Parameters:
            first: std::vector< float >::iterator
            last: std::vector< float >::iterator

        """
        return _teca_py_data.std_vector_float_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(float)> self) -> std_vector_float
        __init__(std::vector<(float)> self, std_vector_float arg2) -> std_vector_float

        Parameters:
            arg2: std::vector< float > const &

        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> std_vector_float

        Parameters:
            size: std::vector< float >::size_type

        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> std_vector_float

        Parameters:
            size: std::vector< float >::size_type
            value: std::vector< float >::value_type const &

        """
        this = _teca_py_data.new_std_vector_float(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_float self, std::vector< float >::value_type const & x)

        Parameters:
            x: std::vector< float >::value_type const &

        """
        return _teca_py_data.std_vector_float_push_back(self, x)


    def front(self):
        """
        front(std_vector_float self) -> std::vector< float >::value_type const &

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float_front(self)


    def back(self):
        """
        back(std_vector_float self) -> std::vector< float >::value_type const &

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_float self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters:
            n: std::vector< float >::size_type
            x: std::vector< float >::value_type const &

        """
        return _teca_py_data.std_vector_float_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_float self, std::vector< float >::size_type new_size)

        Parameters:
            new_size: std::vector< float >::size_type

        resize(std_vector_float self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)

        Parameters:
            new_size: std::vector< float >::size_type
            x: std::vector< float >::value_type const &

        """
        return _teca_py_data.std_vector_float_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_float self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator

        Parameters:
            pos: std::vector< float >::iterator
            x: std::vector< float >::value_type const &

        insert(std_vector_float self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)

        Parameters:
            pos: std::vector< float >::iterator
            n: std::vector< float >::size_type
            x: std::vector< float >::value_type const &

        """
        return _teca_py_data.std_vector_float_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_float self, std::vector< float >::size_type n)

        Parameters:
            n: std::vector< float >::size_type

        """
        return _teca_py_data.std_vector_float_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_float self) -> std::vector< float >::size_type

        Parameters:
            self: std::vector< float > const *

        """
        return _teca_py_data.std_vector_float_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_float
    __del__ = lambda self: None
std_vector_float_swigregister = _teca_py_data.std_vector_float_swigregister
std_vector_float_swigregister(std_vector_float)

class std_vector_double(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_double self) -> SwigPyIterator

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_double self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_double self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_double self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double___len__(self)


    def pop(self):
        """
        pop(std_vector_double self) -> std::vector< double >::value_type

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> std_vector_double

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _teca_py_data.std_vector_double___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, std_vector_double v)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type
            v: std::vector< double,std::allocator< double > > const &

        __setslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _teca_py_data.std_vector_double___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters:
            i: std::vector< double >::difference_type
            j: std::vector< double >::difference_type

        """
        return _teca_py_data.std_vector_double___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_double self, std::vector< double >::difference_type i)

        Parameters:
            i: std::vector< double >::difference_type

        __delitem__(std_vector_double self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_double___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_double self, PySliceObject * slice) -> std_vector_double

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters:
            i: std::vector< double >::difference_type

        """
        return _teca_py_data.std_vector_double___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_double self, PySliceObject * slice, std_vector_double v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< double,std::allocator< double > > const &

        __setitem__(std_vector_double self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters:
            i: std::vector< double >::difference_type
            x: std::vector< double >::value_type const &

        """
        return _teca_py_data.std_vector_double___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_double self, std::vector< double >::value_type const & x)

        Parameters:
            x: std::vector< double >::value_type const &

        """
        return _teca_py_data.std_vector_double_append(self, x)


    def empty(self):
        """
        empty(std_vector_double self) -> bool

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double_empty(self)


    def size(self):
        """
        size(std_vector_double self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double_size(self)


    def clear(self):
        """
        clear(std_vector_double self)

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_clear(self)


    def swap(self, v):
        """
        swap(std_vector_double self, std_vector_double v)

        Parameters:
            v: std::vector< double > &

        """
        return _teca_py_data.std_vector_double_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_double self) -> std::vector< double >::allocator_type

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_double self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_begin(self)


    def end(self):
        """
        end(std_vector_double self) -> std::vector< double >::iterator

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_double self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_rbegin(self)


    def rend(self):
        """
        rend(std_vector_double self) -> std::vector< double >::reverse_iterator

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_double self)

        Parameters:
            self: std::vector< double > *

        """
        return _teca_py_data.std_vector_double_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator

        erase(std_vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters:
            first: std::vector< double >::iterator
            last: std::vector< double >::iterator

        """
        return _teca_py_data.std_vector_double_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> std_vector_double
        __init__(std::vector<(double)> self, std_vector_double arg2) -> std_vector_double

        Parameters:
            arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> std_vector_double

        Parameters:
            size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> std_vector_double

        Parameters:
            size: std::vector< double >::size_type
            value: std::vector< double >::value_type const &

        """
        this = _teca_py_data.new_std_vector_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_double self, std::vector< double >::value_type const & x)

        Parameters:
            x: std::vector< double >::value_type const &

        """
        return _teca_py_data.std_vector_double_push_back(self, x)


    def front(self):
        """
        front(std_vector_double self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double_front(self)


    def back(self):
        """
        back(std_vector_double self) -> std::vector< double >::value_type const &

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters:
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _teca_py_data.std_vector_double_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_double self, std::vector< double >::size_type new_size)

        Parameters:
            new_size: std::vector< double >::size_type

        resize(std_vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters:
            new_size: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _teca_py_data.std_vector_double_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters:
            pos: std::vector< double >::iterator
            x: std::vector< double >::value_type const &

        insert(std_vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters:
            pos: std::vector< double >::iterator
            n: std::vector< double >::size_type
            x: std::vector< double >::value_type const &

        """
        return _teca_py_data.std_vector_double_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_double self, std::vector< double >::size_type n)

        Parameters:
            n: std::vector< double >::size_type

        """
        return _teca_py_data.std_vector_double_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_double self) -> std::vector< double >::size_type

        Parameters:
            self: std::vector< double > const *

        """
        return _teca_py_data.std_vector_double_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_double
    __del__ = lambda self: None
std_vector_double_swigregister = _teca_py_data.std_vector_double_swigregister
std_vector_double_swigregister(std_vector_double)

class std_vector_string(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_string self) -> SwigPyIterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_string self) -> bool

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_string self) -> bool

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_string self) -> std::vector< std::string >::size_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string___len__(self)


    def pop(self):
        """
        pop(std_vector_string self) -> std::vector< std::string >::value_type

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> std_vector_string

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type

        """
        return _teca_py_data.std_vector_string___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, std_vector_string v)

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type
            v: std::vector< std::string,std::allocator< std::string > > const &

        __setslice__(std_vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type

        """
        return _teca_py_data.std_vector_string___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters:
            i: std::vector< std::string >::difference_type
            j: std::vector< std::string >::difference_type

        """
        return _teca_py_data.std_vector_string___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_string self, std::vector< std::string >::difference_type i)

        Parameters:
            i: std::vector< std::string >::difference_type

        __delitem__(std_vector_string self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_string___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_string self, PySliceObject * slice) -> std_vector_string

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_string self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters:
            i: std::vector< std::string >::difference_type

        """
        return _teca_py_data.std_vector_string___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_string self, PySliceObject * slice, std_vector_string v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(std_vector_string self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters:
            i: std::vector< std::string >::difference_type
            x: std::vector< std::string >::value_type const &

        """
        return _teca_py_data.std_vector_string___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_string self, std::vector< std::string >::value_type const & x)

        Parameters:
            x: std::vector< std::string >::value_type const &

        """
        return _teca_py_data.std_vector_string_append(self, x)


    def empty(self):
        """
        empty(std_vector_string self) -> bool

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string_empty(self)


    def size(self):
        """
        size(std_vector_string self) -> std::vector< std::string >::size_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string_size(self)


    def clear(self):
        """
        clear(std_vector_string self)

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_clear(self)


    def swap(self, v):
        """
        swap(std_vector_string self, std_vector_string v)

        Parameters:
            v: std::vector< std::string > &

        """
        return _teca_py_data.std_vector_string_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_string self) -> std::vector< std::string >::allocator_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_string self) -> std::vector< std::string >::iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_begin(self)


    def end(self):
        """
        end(std_vector_string self) -> std::vector< std::string >::iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_string self) -> std::vector< std::string >::reverse_iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_rbegin(self)


    def rend(self):
        """
        rend(std_vector_string self) -> std::vector< std::string >::reverse_iterator

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_string self)

        Parameters:
            self: std::vector< std::string > *

        """
        return _teca_py_data.std_vector_string_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_string self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters:
            pos: std::vector< std::string >::iterator

        erase(std_vector_string self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters:
            first: std::vector< std::string >::iterator
            last: std::vector< std::string >::iterator

        """
        return _teca_py_data.std_vector_string_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> std_vector_string
        __init__(std::vector<(std::string)> self, std_vector_string arg2) -> std_vector_string

        Parameters:
            arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> std_vector_string

        Parameters:
            size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> std_vector_string

        Parameters:
            size: std::vector< std::string >::size_type
            value: std::vector< std::string >::value_type const &

        """
        this = _teca_py_data.new_std_vector_string(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_string self, std::vector< std::string >::value_type const & x)

        Parameters:
            x: std::vector< std::string >::value_type const &

        """
        return _teca_py_data.std_vector_string_push_back(self, x)


    def front(self):
        """
        front(std_vector_string self) -> std::vector< std::string >::value_type const &

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string_front(self)


    def back(self):
        """
        back(std_vector_string self) -> std::vector< std::string >::value_type const &

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_string self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters:
            n: std::vector< std::string >::size_type
            x: std::vector< std::string >::value_type const &

        """
        return _teca_py_data.std_vector_string_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_string self, std::vector< std::string >::size_type new_size)

        Parameters:
            new_size: std::vector< std::string >::size_type

        resize(std_vector_string self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters:
            new_size: std::vector< std::string >::size_type
            x: std::vector< std::string >::value_type const &

        """
        return _teca_py_data.std_vector_string_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters:
            pos: std::vector< std::string >::iterator
            x: std::vector< std::string >::value_type const &

        insert(std_vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters:
            pos: std::vector< std::string >::iterator
            n: std::vector< std::string >::size_type
            x: std::vector< std::string >::value_type const &

        """
        return _teca_py_data.std_vector_string_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_string self, std::vector< std::string >::size_type n)

        Parameters:
            n: std::vector< std::string >::size_type

        """
        return _teca_py_data.std_vector_string_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_string self) -> std::vector< std::string >::size_type

        Parameters:
            self: std::vector< std::string > const *

        """
        return _teca_py_data.std_vector_string_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_string
    __del__ = lambda self: None
std_vector_string_swigregister = _teca_py_data.std_vector_string_swigregister
std_vector_string_swigregister(std_vector_string)

class teca_variant_array(_object):
    """Proxy of C++ teca_variant_array class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_variant_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_variant_array, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_data.delete_teca_variant_array
    __del__ = lambda self: None

    def new_instance(self):
        """
        new_instance(teca_variant_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array const *

        """
        return _teca_py_data.teca_variant_array_new_instance(self)


    def new_copy(self, *args):
        """
        new_copy(teca_variant_array self) -> p_teca_variant_array
        new_copy(teca_variant_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_variant_array_new_copy(self, *args)


    def __eq__(self, other):
        """
        __eq__(teca_variant_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_variant_array___eq__(self, other)


    def size(self):
        """
        size(teca_variant_array self) -> unsigned long

        Parameters:
            self: teca_variant_array const *

        """
        return _teca_py_data.teca_variant_array_size(self)


    def resize(self, i):
        """
        resize(teca_variant_array self, unsigned long i)

        Parameters:
            i: unsigned long

        """
        return _teca_py_data.teca_variant_array_resize(self, i)


    def reserve(self, i):
        """
        reserve(teca_variant_array self, unsigned long i)

        Parameters:
            i: unsigned long

        """
        return _teca_py_data.teca_variant_array_reserve(self, i)


    def clear(self):
        """
        clear(teca_variant_array self)

        Parameters:
            self: teca_variant_array *

        """
        return _teca_py_data.teca_variant_array_clear(self)


    def swap(self, *args):
        """
        swap(teca_variant_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        swap(teca_variant_array self, p_teca_variant_array const & other)

        Parameters:
            other: p_teca_variant_array const &

        """
        return _teca_py_data.teca_variant_array_swap(self, *args)


    def equal(self, *args):
        """
        equal(teca_variant_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        equal(teca_variant_array self, const_p_teca_variant_array const & other) -> bool

        Parameters:
            other: const_p_teca_variant_array const &

        """
        return _teca_py_data.teca_variant_array_equal(self, *args)


    def to_stream(self, *args):
        """
        to_stream(teca_variant_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_variant_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_variant_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_variant_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_variant_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_variant_array_from_stream(self, *args)


    def type_code(self):
        """
        type_code(teca_variant_array self) -> unsigned int

        Parameters:
            self: teca_variant_array const *

        """
        return _teca_py_data.teca_variant_array_type_code(self)


    def New(obj):
        """
        New(PyObject * obj) -> p_teca_variant_array

        Parameters:
            obj: PyObject *

        """
        return _teca_py_data.teca_variant_array_New(obj)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New

    def __str__(self):
        """
        __str__(teca_variant_array self) -> PyObject *

        Parameters:
            self: teca_variant_array *

        """
        return _teca_py_data.teca_variant_array___str__(self)


    def __setitem__(self, i, value):
        """
        __setitem__(teca_variant_array self, unsigned long i, PyObject * value)

        Parameters:
            i: unsigned long
            value: PyObject *

        """
        return _teca_py_data.teca_variant_array___setitem__(self, i, value)


    def __getitem__(self, i):
        """
        __getitem__(teca_variant_array self, unsigned long i) -> PyObject *

        Parameters:
            i: unsigned long

        """
        return _teca_py_data.teca_variant_array___getitem__(self, i)


    def as_array(self):
        """
        as_array(teca_variant_array self) -> PyObject *

        Parameters:
            self: teca_variant_array *

        """
        return _teca_py_data.teca_variant_array_as_array(self)


    def append(self, obj):
        """
        append(teca_variant_array self, PyObject * obj)

        Parameters:
            obj: PyObject *

        """
        return _teca_py_data.teca_variant_array_append(self, obj)


    def copy(self, *args):
        """
        copy(teca_variant_array self, const_p_teca_variant_array const & other)

        Parameters:
            other: const_p_teca_variant_array const &

        copy(teca_variant_array self, PyObject * obj)

        Parameters:
            obj: PyObject *

        """
        return _teca_py_data.teca_variant_array_copy(self, *args)

teca_variant_array_swigregister = _teca_py_data.teca_variant_array_swigregister
teca_variant_array_swigregister(teca_variant_array)

def teca_variant_array_New(obj):
    """
    teca_variant_array_New(PyObject * obj) -> p_teca_variant_array

    Parameters:
        obj: PyObject *

    """
    return _teca_py_data.teca_variant_array_New(obj)

class teca_double_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_double_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_double_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< double > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< double > >

        Parameters:
            n: size_t

        New(size_t n, double const & v) -> std::shared_ptr< teca_variant_array_impl< double > >

        Parameters:
            n: size_t
            v: double const &

        New(double const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< double > >

        Parameters:
            vals: double const *
            n: size_t

        """
        return _teca_py_data.teca_double_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_double_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_double_array self) -> p_teca_variant_array
        new_copy(teca_double_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_double_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_double_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< double > const *

        """
        return _teca_py_data.teca_double_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(double)> self, teca_double_array other) -> teca_double_array

        Parameters:
            other: teca_variant_array_impl< double > &&

        """
        this = _teca_py_data.new_teca_double_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_double_array self, unsigned long i) -> double

        Parameters:
            i: unsigned long

        get(teca_double_array self, unsigned long i) -> double const

        Parameters:
            i: unsigned long

        get(teca_double_array self) -> double
        get(teca_double_array self) -> double const *

        Parameters:
            self: teca_variant_array_impl< double > const *

        """
        return _teca_py_data.teca_double_array_get(self, *args)


    def size(self):
        """
        size(teca_double_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< double > const *

        """
        return _teca_py_data.teca_double_array_size(self)


    def resize(self, *args):
        """
        resize(teca_double_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_double_array self, unsigned long n, double const & val)

        Parameters:
            n: unsigned long
            val: double const &

        """
        return _teca_py_data.teca_double_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_double_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_double_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_double_array self)

        Parameters:
            self: teca_variant_array_impl< double > *

        """
        return _teca_py_data.teca_double_array_clear(self)


    def swap(self, other):
        """
        swap(teca_double_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_double_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_double_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_double_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_double_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_double_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_double_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_double_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_double_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_double_array_from_stream(self, *args)

teca_double_array_swigregister = _teca_py_data.teca_double_array_swigregister
teca_double_array_swigregister(teca_double_array)

def teca_double_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< double > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< double > >

    Parameters:
        n: size_t

    New(size_t n, double const & v) -> std::shared_ptr< teca_variant_array_impl< double > >

    Parameters:
        n: size_t
        v: double const &

    teca_double_array_New(double const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< double > >

    Parameters:
        vals: double const *
        n: size_t

    """
    return _teca_py_data.teca_double_array_New(*args)

class teca_float_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(float)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_float_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_float_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< float > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< float > >

        Parameters:
            n: size_t

        New(size_t n, float const & v) -> std::shared_ptr< teca_variant_array_impl< float > >

        Parameters:
            n: size_t
            v: float const &

        New(float const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< float > >

        Parameters:
            vals: float const *
            n: size_t

        """
        return _teca_py_data.teca_float_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_float_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_float_array self) -> p_teca_variant_array
        new_copy(teca_float_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_float_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_float_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< float > const *

        """
        return _teca_py_data.teca_float_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(float)> self, teca_float_array other) -> teca_float_array

        Parameters:
            other: teca_variant_array_impl< float > &&

        """
        this = _teca_py_data.new_teca_float_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_float_array self, unsigned long i) -> float

        Parameters:
            i: unsigned long

        get(teca_float_array self, unsigned long i) -> float const

        Parameters:
            i: unsigned long

        get(teca_float_array self) -> float
        get(teca_float_array self) -> float const *

        Parameters:
            self: teca_variant_array_impl< float > const *

        """
        return _teca_py_data.teca_float_array_get(self, *args)


    def size(self):
        """
        size(teca_float_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< float > const *

        """
        return _teca_py_data.teca_float_array_size(self)


    def resize(self, *args):
        """
        resize(teca_float_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_float_array self, unsigned long n, float const & val)

        Parameters:
            n: unsigned long
            val: float const &

        """
        return _teca_py_data.teca_float_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_float_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_float_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_float_array self)

        Parameters:
            self: teca_variant_array_impl< float > *

        """
        return _teca_py_data.teca_float_array_clear(self)


    def swap(self, other):
        """
        swap(teca_float_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_float_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_float_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_float_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_float_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_float_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_float_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_float_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_float_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_float_array_from_stream(self, *args)

teca_float_array_swigregister = _teca_py_data.teca_float_array_swigregister
teca_float_array_swigregister(teca_float_array)

def teca_float_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< float > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< float > >

    Parameters:
        n: size_t

    New(size_t n, float const & v) -> std::shared_ptr< teca_variant_array_impl< float > >

    Parameters:
        n: size_t
        v: float const &

    teca_float_array_New(float const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< float > >

    Parameters:
        vals: float const *
        n: size_t

    """
    return _teca_py_data.teca_float_array_New(*args)

class teca_int_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_int_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_int_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< char > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< char > >

        Parameters:
            n: size_t

        New(size_t n, char const & v) -> std::shared_ptr< teca_variant_array_impl< char > >

        Parameters:
            n: size_t
            v: char const &

        New(char const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< char > >

        Parameters:
            vals: char const *
            n: size_t

        """
        return _teca_py_data.teca_int_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_int_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_int_array self) -> p_teca_variant_array
        new_copy(teca_int_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_int_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_int_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< char > const *

        """
        return _teca_py_data.teca_int_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(char)> self, teca_int_array other) -> teca_int_array

        Parameters:
            other: teca_variant_array_impl< char > &&

        """
        this = _teca_py_data.new_teca_int_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_int_array self, unsigned long i) -> char

        Parameters:
            i: unsigned long

        get(teca_int_array self, unsigned long i) -> char const

        Parameters:
            i: unsigned long

        get(teca_int_array self) -> char
        get(teca_int_array self) -> char const *

        Parameters:
            self: teca_variant_array_impl< char > const *

        """
        return _teca_py_data.teca_int_array_get(self, *args)


    def size(self):
        """
        size(teca_int_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< char > const *

        """
        return _teca_py_data.teca_int_array_size(self)


    def resize(self, *args):
        """
        resize(teca_int_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_int_array self, unsigned long n, char const & val)

        Parameters:
            n: unsigned long
            val: char const &

        """
        return _teca_py_data.teca_int_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_int_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_int_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_int_array self)

        Parameters:
            self: teca_variant_array_impl< char > *

        """
        return _teca_py_data.teca_int_array_clear(self)


    def swap(self, other):
        """
        swap(teca_int_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_int_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_int_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_int_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_int_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_int_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_int_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_int_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_int_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_int_array_from_stream(self, *args)

teca_int_array_swigregister = _teca_py_data.teca_int_array_swigregister
teca_int_array_swigregister(teca_int_array)

def teca_int_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< char > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< char > >

    Parameters:
        n: size_t

    New(size_t n, char const & v) -> std::shared_ptr< teca_variant_array_impl< char > >

    Parameters:
        n: size_t
        v: char const &

    teca_int_array_New(char const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< char > >

    Parameters:
        vals: char const *
        n: size_t

    """
    return _teca_py_data.teca_int_array_New(*args)

class teca_char_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(int)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_char_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_char_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< int > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< int > >

        Parameters:
            n: size_t

        New(size_t n, int const & v) -> std::shared_ptr< teca_variant_array_impl< int > >

        Parameters:
            n: size_t
            v: int const &

        New(int const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< int > >

        Parameters:
            vals: int const *
            n: size_t

        """
        return _teca_py_data.teca_char_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_char_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_char_array self) -> p_teca_variant_array
        new_copy(teca_char_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_char_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_char_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< int > const *

        """
        return _teca_py_data.teca_char_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(int)> self, teca_char_array other) -> teca_char_array

        Parameters:
            other: teca_variant_array_impl< int > &&

        """
        this = _teca_py_data.new_teca_char_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_char_array self, unsigned long i) -> int

        Parameters:
            i: unsigned long

        get(teca_char_array self, unsigned long i) -> int const

        Parameters:
            i: unsigned long

        get(teca_char_array self) -> int
        get(teca_char_array self) -> int const *

        Parameters:
            self: teca_variant_array_impl< int > const *

        """
        return _teca_py_data.teca_char_array_get(self, *args)


    def size(self):
        """
        size(teca_char_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< int > const *

        """
        return _teca_py_data.teca_char_array_size(self)


    def resize(self, *args):
        """
        resize(teca_char_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_char_array self, unsigned long n, int const & val)

        Parameters:
            n: unsigned long
            val: int const &

        """
        return _teca_py_data.teca_char_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_char_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_char_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_char_array self)

        Parameters:
            self: teca_variant_array_impl< int > *

        """
        return _teca_py_data.teca_char_array_clear(self)


    def swap(self, other):
        """
        swap(teca_char_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_char_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_char_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_char_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_char_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_char_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_char_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_char_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_char_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_char_array_from_stream(self, *args)

teca_char_array_swigregister = _teca_py_data.teca_char_array_swigregister
teca_char_array_swigregister(teca_char_array)

def teca_char_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< int > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< int > >

    Parameters:
        n: size_t

    New(size_t n, int const & v) -> std::shared_ptr< teca_variant_array_impl< int > >

    Parameters:
        n: size_t
        v: int const &

    teca_char_array_New(int const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< int > >

    Parameters:
        vals: int const *
        n: size_t

    """
    return _teca_py_data.teca_char_array_New(*args)

class teca_long_long_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(long long)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_long_long_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_long_long_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< long long > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< long long > >

        Parameters:
            n: size_t

        New(size_t n, long long const & v) -> std::shared_ptr< teca_variant_array_impl< long long > >

        Parameters:
            n: size_t
            v: long long const &

        New(long long const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< long long > >

        Parameters:
            vals: long long const *
            n: size_t

        """
        return _teca_py_data.teca_long_long_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_long_long_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_long_long_array self) -> p_teca_variant_array
        new_copy(teca_long_long_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_long_long_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_long_long_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< long long > const *

        """
        return _teca_py_data.teca_long_long_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(long long)> self, teca_long_long_array other) -> teca_long_long_array

        Parameters:
            other: teca_variant_array_impl< long long > &&

        """
        this = _teca_py_data.new_teca_long_long_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_long_long_array self, unsigned long i) -> long long

        Parameters:
            i: unsigned long

        get(teca_long_long_array self, unsigned long i) -> long long const

        Parameters:
            i: unsigned long

        get(teca_long_long_array self) -> long long
        get(teca_long_long_array self) -> long long const *

        Parameters:
            self: teca_variant_array_impl< long long > const *

        """
        return _teca_py_data.teca_long_long_array_get(self, *args)


    def size(self):
        """
        size(teca_long_long_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< long long > const *

        """
        return _teca_py_data.teca_long_long_array_size(self)


    def resize(self, *args):
        """
        resize(teca_long_long_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_long_long_array self, unsigned long n, long long const & val)

        Parameters:
            n: unsigned long
            val: long long const &

        """
        return _teca_py_data.teca_long_long_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_long_long_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_long_long_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_long_long_array self)

        Parameters:
            self: teca_variant_array_impl< long long > *

        """
        return _teca_py_data.teca_long_long_array_clear(self)


    def swap(self, other):
        """
        swap(teca_long_long_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_long_long_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_long_long_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_long_long_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_long_long_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_long_long_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_long_long_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_long_long_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_long_long_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_long_long_array_from_stream(self, *args)

teca_long_long_array_swigregister = _teca_py_data.teca_long_long_array_swigregister
teca_long_long_array_swigregister(teca_long_long_array)

def teca_long_long_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< long long > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< long long > >

    Parameters:
        n: size_t

    New(size_t n, long long const & v) -> std::shared_ptr< teca_variant_array_impl< long long > >

    Parameters:
        n: size_t
        v: long long const &

    teca_long_long_array_New(long long const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< long long > >

    Parameters:
        vals: long long const *
        n: size_t

    """
    return _teca_py_data.teca_long_long_array_New(*args)

class teca_unsigned_int_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(unsigned char)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_unsigned_int_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_unsigned_int_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< unsigned char > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned char > >

        Parameters:
            n: size_t

        New(size_t n, unsigned char const & v) -> std::shared_ptr< teca_variant_array_impl< unsigned char > >

        Parameters:
            n: size_t
            v: unsigned char const &

        New(unsigned char const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned char > >

        Parameters:
            vals: unsigned char const *
            n: size_t

        """
        return _teca_py_data.teca_unsigned_int_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_unsigned_int_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_unsigned_int_array self) -> p_teca_variant_array
        new_copy(teca_unsigned_int_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_unsigned_int_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_unsigned_int_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< unsigned char > const *

        """
        return _teca_py_data.teca_unsigned_int_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(unsigned char)> self, teca_unsigned_int_array other) -> teca_unsigned_int_array

        Parameters:
            other: teca_variant_array_impl< unsigned char > &&

        """
        this = _teca_py_data.new_teca_unsigned_int_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_unsigned_int_array self, unsigned long i) -> unsigned char

        Parameters:
            i: unsigned long

        get(teca_unsigned_int_array self, unsigned long i) -> unsigned char const

        Parameters:
            i: unsigned long

        get(teca_unsigned_int_array self) -> unsigned char
        get(teca_unsigned_int_array self) -> unsigned char const *

        Parameters:
            self: teca_variant_array_impl< unsigned char > const *

        """
        return _teca_py_data.teca_unsigned_int_array_get(self, *args)


    def size(self):
        """
        size(teca_unsigned_int_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< unsigned char > const *

        """
        return _teca_py_data.teca_unsigned_int_array_size(self)


    def resize(self, *args):
        """
        resize(teca_unsigned_int_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_unsigned_int_array self, unsigned long n, unsigned char const & val)

        Parameters:
            n: unsigned long
            val: unsigned char const &

        """
        return _teca_py_data.teca_unsigned_int_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_unsigned_int_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_unsigned_int_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_unsigned_int_array self)

        Parameters:
            self: teca_variant_array_impl< unsigned char > *

        """
        return _teca_py_data.teca_unsigned_int_array_clear(self)


    def swap(self, other):
        """
        swap(teca_unsigned_int_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_unsigned_int_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_unsigned_int_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_unsigned_int_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_unsigned_int_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_unsigned_int_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_unsigned_int_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_unsigned_int_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_unsigned_int_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_unsigned_int_array_from_stream(self, *args)

teca_unsigned_int_array_swigregister = _teca_py_data.teca_unsigned_int_array_swigregister
teca_unsigned_int_array_swigregister(teca_unsigned_int_array)

def teca_unsigned_int_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< unsigned char > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned char > >

    Parameters:
        n: size_t

    New(size_t n, unsigned char const & v) -> std::shared_ptr< teca_variant_array_impl< unsigned char > >

    Parameters:
        n: size_t
        v: unsigned char const &

    teca_unsigned_int_array_New(unsigned char const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned char > >

    Parameters:
        vals: unsigned char const *
        n: size_t

    """
    return _teca_py_data.teca_unsigned_int_array_New(*args)

class teca_unsigned_char_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(unsigned int)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_unsigned_char_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_unsigned_char_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< unsigned int > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned int > >

        Parameters:
            n: size_t

        New(size_t n, unsigned int const & v) -> std::shared_ptr< teca_variant_array_impl< unsigned int > >

        Parameters:
            n: size_t
            v: unsigned int const &

        New(unsigned int const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned int > >

        Parameters:
            vals: unsigned int const *
            n: size_t

        """
        return _teca_py_data.teca_unsigned_char_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_unsigned_char_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_unsigned_char_array self) -> p_teca_variant_array
        new_copy(teca_unsigned_char_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_unsigned_char_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_unsigned_char_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< unsigned int > const *

        """
        return _teca_py_data.teca_unsigned_char_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(unsigned int)> self, teca_unsigned_char_array other) -> teca_unsigned_char_array

        Parameters:
            other: teca_variant_array_impl< unsigned int > &&

        """
        this = _teca_py_data.new_teca_unsigned_char_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_unsigned_char_array self, unsigned long i) -> unsigned int

        Parameters:
            i: unsigned long

        get(teca_unsigned_char_array self, unsigned long i) -> unsigned int const

        Parameters:
            i: unsigned long

        get(teca_unsigned_char_array self) -> unsigned int
        get(teca_unsigned_char_array self) -> unsigned int const *

        Parameters:
            self: teca_variant_array_impl< unsigned int > const *

        """
        return _teca_py_data.teca_unsigned_char_array_get(self, *args)


    def size(self):
        """
        size(teca_unsigned_char_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< unsigned int > const *

        """
        return _teca_py_data.teca_unsigned_char_array_size(self)


    def resize(self, *args):
        """
        resize(teca_unsigned_char_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_unsigned_char_array self, unsigned long n, unsigned int const & val)

        Parameters:
            n: unsigned long
            val: unsigned int const &

        """
        return _teca_py_data.teca_unsigned_char_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_unsigned_char_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_unsigned_char_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_unsigned_char_array self)

        Parameters:
            self: teca_variant_array_impl< unsigned int > *

        """
        return _teca_py_data.teca_unsigned_char_array_clear(self)


    def swap(self, other):
        """
        swap(teca_unsigned_char_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_unsigned_char_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_unsigned_char_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_unsigned_char_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_unsigned_char_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_unsigned_char_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_unsigned_char_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_unsigned_char_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_unsigned_char_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_unsigned_char_array_from_stream(self, *args)

teca_unsigned_char_array_swigregister = _teca_py_data.teca_unsigned_char_array_swigregister
teca_unsigned_char_array_swigregister(teca_unsigned_char_array)

def teca_unsigned_char_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< unsigned int > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned int > >

    Parameters:
        n: size_t

    New(size_t n, unsigned int const & v) -> std::shared_ptr< teca_variant_array_impl< unsigned int > >

    Parameters:
        n: size_t
        v: unsigned int const &

    teca_unsigned_char_array_New(unsigned int const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned int > >

    Parameters:
        vals: unsigned int const *
        n: size_t

    """
    return _teca_py_data.teca_unsigned_char_array_New(*args)

class teca_unsigned_long_long_array(teca_variant_array):
    """Proxy of C++ teca_variant_array_impl<(unsigned long long)> class"""
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_unsigned_long_long_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_unsigned_long_long_array, name)
    __repr__ = _swig_repr

    def New(*args):
        """
        New() -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >
        New(size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >

        Parameters:
            n: size_t

        New(size_t n, unsigned long long const & v) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >

        Parameters:
            n: size_t
            v: unsigned long long const &

        New(unsigned long long const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >

        Parameters:
            vals: unsigned long long const *
            n: size_t

        """
        return _teca_py_data.teca_unsigned_long_long_array_New(*args)

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_unsigned_long_long_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        """
        new_copy(teca_unsigned_long_long_array self) -> p_teca_variant_array
        new_copy(teca_unsigned_long_long_array self, size_t start, size_t end) -> p_teca_variant_array

        Parameters:
            start: size_t
            end: size_t

        """
        return _teca_py_data.teca_unsigned_long_long_array_new_copy(self, *args)


    def new_instance(self):
        """
        new_instance(teca_unsigned_long_long_array self) -> p_teca_variant_array

        Parameters:
            self: teca_variant_array_impl< unsigned long long > const *

        """
        return _teca_py_data.teca_unsigned_long_long_array_new_instance(self)


    def __init__(self, other):
        """
        __init__(teca_variant_array_impl<(unsigned long long)> self, teca_unsigned_long_long_array other) -> teca_unsigned_long_long_array

        Parameters:
            other: teca_variant_array_impl< unsigned long long > &&

        """
        this = _teca_py_data.new_teca_unsigned_long_long_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        """
        get(teca_unsigned_long_long_array self, unsigned long i) -> unsigned long long

        Parameters:
            i: unsigned long

        get(teca_unsigned_long_long_array self, unsigned long i) -> unsigned long long const

        Parameters:
            i: unsigned long

        get(teca_unsigned_long_long_array self) -> unsigned long long
        get(teca_unsigned_long_long_array self) -> unsigned long long const *

        Parameters:
            self: teca_variant_array_impl< unsigned long long > const *

        """
        return _teca_py_data.teca_unsigned_long_long_array_get(self, *args)


    def size(self):
        """
        size(teca_unsigned_long_long_array self) -> unsigned long

        Parameters:
            self: teca_variant_array_impl< unsigned long long > const *

        """
        return _teca_py_data.teca_unsigned_long_long_array_size(self)


    def resize(self, *args):
        """
        resize(teca_unsigned_long_long_array self, unsigned long n)

        Parameters:
            n: unsigned long

        resize(teca_unsigned_long_long_array self, unsigned long n, unsigned long long const & val)

        Parameters:
            n: unsigned long
            val: unsigned long long const &

        """
        return _teca_py_data.teca_unsigned_long_long_array_resize(self, *args)


    def reserve(self, n):
        """
        reserve(teca_unsigned_long_long_array self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_unsigned_long_long_array_reserve(self, n)


    def clear(self):
        """
        clear(teca_unsigned_long_long_array self)

        Parameters:
            self: teca_variant_array_impl< unsigned long long > *

        """
        return _teca_py_data.teca_unsigned_long_long_array_clear(self)


    def swap(self, other):
        """
        swap(teca_unsigned_long_long_array self, teca_variant_array other)

        Parameters:
            other: teca_variant_array &

        """
        return _teca_py_data.teca_unsigned_long_long_array_swap(self, other)


    def equal(self, other):
        """
        equal(teca_unsigned_long_long_array self, teca_variant_array other) -> bool

        Parameters:
            other: teca_variant_array const &

        """
        return _teca_py_data.teca_unsigned_long_long_array_equal(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_unsigned_long_long_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_unsigned_long_long_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_unsigned_long_long_array_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_unsigned_long_long_array self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_unsigned_long_long_array self, std::ostream & s)

        Parameters:
            s: std::ostream &

        """
        return _teca_py_data.teca_unsigned_long_long_array_from_stream(self, *args)

teca_unsigned_long_long_array_swigregister = _teca_py_data.teca_unsigned_long_long_array_swigregister
teca_unsigned_long_long_array_swigregister(teca_unsigned_long_long_array)

def teca_unsigned_long_long_array_New(*args):
    """
    New() -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >
    New(size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >

    Parameters:
        n: size_t

    New(size_t n, unsigned long long const & v) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >

    Parameters:
        n: size_t
        v: unsigned long long const &

    teca_unsigned_long_long_array_New(unsigned long long const * vals, size_t n) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >

    Parameters:
        vals: unsigned long long const *
        n: size_t

    """
    return _teca_py_data.teca_unsigned_long_long_array_New(*args)


def as_teca_double_array(in_inst):
    """
    as_teca_double_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< double > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_double_array(in_inst)

def as_const_teca_double_array(in_inst):
    """
    as_const_teca_double_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< double > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_double_array(in_inst)

def as_teca_float_array(in_inst):
    """
    as_teca_float_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< float > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_float_array(in_inst)

def as_const_teca_float_array(in_inst):
    """
    as_const_teca_float_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< float > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_float_array(in_inst)

def as_teca_char_array(in_inst):
    """
    as_teca_char_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< char > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_char_array(in_inst)

def as_const_teca_char_array(in_inst):
    """
    as_const_teca_char_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< char > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_char_array(in_inst)

def as_teca_int_array(in_inst):
    """
    as_teca_int_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< int > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_int_array(in_inst)

def as_const_teca_int_array(in_inst):
    """
    as_const_teca_int_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< int > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_int_array(in_inst)

def as_teca_long_long_array(in_inst):
    """
    as_teca_long_long_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< long long > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_long_long_array(in_inst)

def as_const_teca_long_long_array(in_inst):
    """
    as_const_teca_long_long_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< long long > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_long_long_array(in_inst)

def as_teca_unsigned_char_array(in_inst):
    """
    as_teca_unsigned_char_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< unsigned char > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_unsigned_char_array(in_inst)

def as_const_teca_unsigned_char_array(in_inst):
    """
    as_const_teca_unsigned_char_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< unsigned char > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_unsigned_char_array(in_inst)

def as_teca_unsigned_int_array(in_inst):
    """
    as_teca_unsigned_int_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< unsigned int > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_unsigned_int_array(in_inst)

def as_const_teca_unsigned_int_array(in_inst):
    """
    as_const_teca_unsigned_int_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< unsigned int > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_unsigned_int_array(in_inst)

def as_teca_unsigned_long_long_array(in_inst):
    """
    as_teca_unsigned_long_long_array(p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > >

    Parameters:
        in_inst: p_teca_variant_array

    """
    return _teca_py_data.as_teca_unsigned_long_long_array(in_inst)

def as_const_teca_unsigned_long_long_array(in_inst):
    """
    as_const_teca_unsigned_long_long_array(const_p_teca_variant_array in_inst) -> std::shared_ptr< teca_variant_array_impl< unsigned long long > const >

    Parameters:
        in_inst: const_p_teca_variant_array

    """
    return _teca_py_data.as_const_teca_unsigned_long_long_array(in_inst)
class teca_metadata(_object):
    """Proxy of C++ teca_metadata class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_metadata, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_data.delete_teca_metadata
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(teca_metadata self) -> teca_metadata
        __init__(teca_metadata self, teca_metadata other) -> teca_metadata

        Parameters:
            other: teca_metadata const &

        """
        this = _teca_py_data.new_teca_metadata(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def size(self, name, size):
        """
        size(teca_metadata self, std::string const & name, unsigned int & size) -> int

        Parameters:
            name: std::string const &
            size: unsigned int &

        """
        return _teca_py_data.teca_metadata_size(self, name, size)


    def resize(self, name, n):
        """
        resize(teca_metadata self, std::string const & name, unsigned int n)

        Parameters:
            name: std::string const &
            n: unsigned int

        """
        return _teca_py_data.teca_metadata_resize(self, name, n)


    def remove(self, name):
        """
        remove(teca_metadata self, std::string const & name) -> int

        Parameters:
            name: std::string const &

        """
        return _teca_py_data.teca_metadata_remove(self, name)


    def clear(self):
        """
        clear(teca_metadata self)

        Parameters:
            self: teca_metadata *

        """
        return _teca_py_data.teca_metadata_clear(self)


    def has(self, name):
        """
        has(teca_metadata self, std::string const & name) -> int

        Parameters:
            name: std::string const &

        """
        return _teca_py_data.teca_metadata_has(self, name)


    def empty(self):
        """
        empty(teca_metadata self) -> int

        Parameters:
            self: teca_metadata const *

        """
        return _teca_py_data.teca_metadata_empty(self)


    def __nonzero__(self):
        return _teca_py_data.teca_metadata___nonzero__(self)
    __bool__ = __nonzero__



    def to_stream(self, *args):
        """
        to_stream(teca_metadata self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        to_stream(teca_metadata self, std::ostream & os)

        Parameters:
            os: std::ostream &

        """
        return _teca_py_data.teca_metadata_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_metadata self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        from_stream(teca_metadata self, std::ostream & arg2)

        Parameters:
            arg2: std::ostream &

        """
        return _teca_py_data.teca_metadata_from_stream(self, *args)


    def __str__(self):
        """
        __str__(teca_metadata self) -> PyObject *

        Parameters:
            self: teca_metadata *

        """
        return _teca_py_data.teca_metadata___str__(self)


    def __setitem__(self, name, value):
        """
        __setitem__(teca_metadata self, std::string const & name, PyObject * value)

        Parameters:
            name: std::string const &
            value: PyObject *

        """
        return _teca_py_data.teca_metadata___setitem__(self, name, value)


    def __getitem__(self, name):
        """
        __getitem__(teca_metadata self, std::string const & name) -> PyObject *

        Parameters:
            name: std::string const &

        """
        return _teca_py_data.teca_metadata___getitem__(self, name)


    def append(self, name, obj):
        """
        append(teca_metadata self, std::string const & name, PyObject * obj)

        Parameters:
            name: std::string const &
            obj: PyObject *

        """
        return _teca_py_data.teca_metadata_append(self, name, obj)

teca_metadata_swigregister = _teca_py_data.teca_metadata_swigregister
teca_metadata_swigregister(teca_metadata)

class std_vector_metadata(_object):
    """Proxy of C++ std::vector<(teca_metadata)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_metadata, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_metadata self) -> SwigPyIterator

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_metadata self) -> bool

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_metadata self) -> bool

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_metadata self) -> std::vector< teca_metadata >::size_type

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata___len__(self)


    def pop(self):
        """
        pop(std_vector_metadata self) -> teca_metadata

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_metadata self, std::vector< teca_metadata >::difference_type i, std::vector< teca_metadata >::difference_type j) -> std_vector_metadata

        Parameters:
            i: std::vector< teca_metadata >::difference_type
            j: std::vector< teca_metadata >::difference_type

        """
        return _teca_py_data.std_vector_metadata___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_metadata self, std::vector< teca_metadata >::difference_type i, std::vector< teca_metadata >::difference_type j, std_vector_metadata v)

        Parameters:
            i: std::vector< teca_metadata >::difference_type
            j: std::vector< teca_metadata >::difference_type
            v: std::vector< teca_metadata,std::allocator< teca_metadata > > const &

        __setslice__(std_vector_metadata self, std::vector< teca_metadata >::difference_type i, std::vector< teca_metadata >::difference_type j)

        Parameters:
            i: std::vector< teca_metadata >::difference_type
            j: std::vector< teca_metadata >::difference_type

        """
        return _teca_py_data.std_vector_metadata___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_metadata self, std::vector< teca_metadata >::difference_type i, std::vector< teca_metadata >::difference_type j)

        Parameters:
            i: std::vector< teca_metadata >::difference_type
            j: std::vector< teca_metadata >::difference_type

        """
        return _teca_py_data.std_vector_metadata___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_metadata self, std::vector< teca_metadata >::difference_type i)

        Parameters:
            i: std::vector< teca_metadata >::difference_type

        __delitem__(std_vector_metadata self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_metadata___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_metadata self, PySliceObject * slice) -> std_vector_metadata

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_metadata self, std::vector< teca_metadata >::difference_type i) -> teca_metadata

        Parameters:
            i: std::vector< teca_metadata >::difference_type

        """
        return _teca_py_data.std_vector_metadata___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_metadata self, PySliceObject * slice, std_vector_metadata v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< teca_metadata,std::allocator< teca_metadata > > const &

        __setitem__(std_vector_metadata self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_metadata self, std::vector< teca_metadata >::difference_type i, teca_metadata x)

        Parameters:
            i: std::vector< teca_metadata >::difference_type
            x: std::vector< teca_metadata >::value_type const &

        """
        return _teca_py_data.std_vector_metadata___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_metadata self, teca_metadata x)

        Parameters:
            x: std::vector< teca_metadata >::value_type const &

        """
        return _teca_py_data.std_vector_metadata_append(self, x)


    def empty(self):
        """
        empty(std_vector_metadata self) -> bool

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata_empty(self)


    def size(self):
        """
        size(std_vector_metadata self) -> std::vector< teca_metadata >::size_type

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata_size(self)


    def clear(self):
        """
        clear(std_vector_metadata self)

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_clear(self)


    def swap(self, v):
        """
        swap(std_vector_metadata self, std_vector_metadata v)

        Parameters:
            v: std::vector< teca_metadata > &

        """
        return _teca_py_data.std_vector_metadata_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_metadata self) -> std::vector< teca_metadata >::allocator_type

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_metadata self) -> std::vector< teca_metadata >::iterator

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_begin(self)


    def end(self):
        """
        end(std_vector_metadata self) -> std::vector< teca_metadata >::iterator

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_metadata self) -> std::vector< teca_metadata >::reverse_iterator

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_rbegin(self)


    def rend(self):
        """
        rend(std_vector_metadata self) -> std::vector< teca_metadata >::reverse_iterator

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_metadata self)

        Parameters:
            self: std::vector< teca_metadata > *

        """
        return _teca_py_data.std_vector_metadata_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_metadata self, std::vector< teca_metadata >::iterator pos) -> std::vector< teca_metadata >::iterator

        Parameters:
            pos: std::vector< teca_metadata >::iterator

        erase(std_vector_metadata self, std::vector< teca_metadata >::iterator first, std::vector< teca_metadata >::iterator last) -> std::vector< teca_metadata >::iterator

        Parameters:
            first: std::vector< teca_metadata >::iterator
            last: std::vector< teca_metadata >::iterator

        """
        return _teca_py_data.std_vector_metadata_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(teca_metadata)> self) -> std_vector_metadata
        __init__(std::vector<(teca_metadata)> self, std_vector_metadata arg2) -> std_vector_metadata

        Parameters:
            arg2: std::vector< teca_metadata > const &

        __init__(std::vector<(teca_metadata)> self, std::vector< teca_metadata >::size_type size) -> std_vector_metadata

        Parameters:
            size: std::vector< teca_metadata >::size_type

        __init__(std::vector<(teca_metadata)> self, std::vector< teca_metadata >::size_type size, teca_metadata value) -> std_vector_metadata

        Parameters:
            size: std::vector< teca_metadata >::size_type
            value: std::vector< teca_metadata >::value_type const &

        """
        this = _teca_py_data.new_std_vector_metadata(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_metadata self, teca_metadata x)

        Parameters:
            x: std::vector< teca_metadata >::value_type const &

        """
        return _teca_py_data.std_vector_metadata_push_back(self, x)


    def front(self):
        """
        front(std_vector_metadata self) -> teca_metadata

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata_front(self)


    def back(self):
        """
        back(std_vector_metadata self) -> teca_metadata

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_metadata self, std::vector< teca_metadata >::size_type n, teca_metadata x)

        Parameters:
            n: std::vector< teca_metadata >::size_type
            x: std::vector< teca_metadata >::value_type const &

        """
        return _teca_py_data.std_vector_metadata_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_metadata self, std::vector< teca_metadata >::size_type new_size)

        Parameters:
            new_size: std::vector< teca_metadata >::size_type

        resize(std_vector_metadata self, std::vector< teca_metadata >::size_type new_size, teca_metadata x)

        Parameters:
            new_size: std::vector< teca_metadata >::size_type
            x: std::vector< teca_metadata >::value_type const &

        """
        return _teca_py_data.std_vector_metadata_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_metadata self, std::vector< teca_metadata >::iterator pos, teca_metadata x) -> std::vector< teca_metadata >::iterator

        Parameters:
            pos: std::vector< teca_metadata >::iterator
            x: std::vector< teca_metadata >::value_type const &

        insert(std_vector_metadata self, std::vector< teca_metadata >::iterator pos, std::vector< teca_metadata >::size_type n, teca_metadata x)

        Parameters:
            pos: std::vector< teca_metadata >::iterator
            n: std::vector< teca_metadata >::size_type
            x: std::vector< teca_metadata >::value_type const &

        """
        return _teca_py_data.std_vector_metadata_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_metadata self, std::vector< teca_metadata >::size_type n)

        Parameters:
            n: std::vector< teca_metadata >::size_type

        """
        return _teca_py_data.std_vector_metadata_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_metadata self) -> std::vector< teca_metadata >::size_type

        Parameters:
            self: std::vector< teca_metadata > const *

        """
        return _teca_py_data.std_vector_metadata_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_metadata
    __del__ = lambda self: None
std_vector_metadata_swigregister = _teca_py_data.std_vector_metadata_swigregister
std_vector_metadata_swigregister(std_vector_metadata)

class teca_dataset(_object):
    """Proxy of C++ teca_dataset class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_dataset, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_data.delete_teca_dataset
    __del__ = lambda self: None

    def __nonzero__(self):
        return _teca_py_data.teca_dataset___nonzero__(self)
    __bool__ = __nonzero__



    def empty(self):
        """
        empty(teca_dataset self) -> bool

        Parameters:
            self: teca_dataset const *

        """
        return _teca_py_data.teca_dataset_empty(self)


    def new_instance(self):
        """
        new_instance(teca_dataset self) -> p_teca_dataset

        Parameters:
            self: teca_dataset const *

        """
        return _teca_py_data.teca_dataset_new_instance(self)


    def new_copy(self):
        """
        new_copy(teca_dataset self) -> p_teca_dataset

        Parameters:
            self: teca_dataset const *

        """
        return _teca_py_data.teca_dataset_new_copy(self)


    def copy(self, other):
        """
        copy(teca_dataset self, const_p_teca_dataset const & other)

        Parameters:
            other: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_dataset_copy(self, other)


    def shallow_copy(self, other):
        """
        shallow_copy(teca_dataset self, p_teca_dataset const & other)

        Parameters:
            other: p_teca_dataset const &

        """
        return _teca_py_data.teca_dataset_shallow_copy(self, other)


    def copy_metadata(self, other):
        """
        copy_metadata(teca_dataset self, const_p_teca_dataset const & other)

        Parameters:
            other: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_dataset_copy_metadata(self, other)


    def swap(self, other):
        """
        swap(teca_dataset self, p_teca_dataset & other)

        Parameters:
            other: p_teca_dataset &

        """
        return _teca_py_data.teca_dataset_swap(self, other)


    def to_stream(self, *args):
        """
        to_stream(teca_dataset self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        to_stream(teca_dataset self, std::ostream & arg2)

        Parameters:
            arg2: std::ostream &

        """
        return _teca_py_data.teca_dataset_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_dataset self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        from_stream(teca_dataset self, std::istream & arg2)

        Parameters:
            arg2: std::istream &

        """
        return _teca_py_data.teca_dataset_from_stream(self, *args)


    def __str__(self):
        """
        __str__(teca_dataset self) -> PyObject *

        Parameters:
            self: teca_dataset *

        """
        return _teca_py_data.teca_dataset___str__(self)

teca_dataset_swigregister = _teca_py_data.teca_dataset_swigregister
teca_dataset_swigregister(teca_dataset)

class std_vector_dataset(_object):
    """Proxy of C++ std::vector<(std::shared_ptr<(teca_dataset)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, std_vector_dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, std_vector_dataset, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(std_vector_dataset self) -> SwigPyIterator

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(std_vector_dataset self) -> bool

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset___nonzero__(self)


    def __bool__(self):
        """
        __bool__(std_vector_dataset self) -> bool

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset___bool__(self)


    def __len__(self):
        """
        __len__(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::size_type

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset___len__(self)


    def pop(self):
        """
        pop(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::value_type

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_pop(self)


    def __getslice__(self, i, j):
        """
        __getslice__(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::difference_type i, std::vector< std::shared_ptr< teca_dataset > >::difference_type j) -> std_vector_dataset

        Parameters:
            i: std::vector< std::shared_ptr< teca_dataset > >::difference_type
            j: std::vector< std::shared_ptr< teca_dataset > >::difference_type

        """
        return _teca_py_data.std_vector_dataset___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::difference_type i, std::vector< std::shared_ptr< teca_dataset > >::difference_type j, std_vector_dataset v)

        Parameters:
            i: std::vector< std::shared_ptr< teca_dataset > >::difference_type
            j: std::vector< std::shared_ptr< teca_dataset > >::difference_type
            v: std::vector< std::shared_ptr< teca_dataset >,std::allocator< std::shared_ptr< teca_dataset > > > const &

        __setslice__(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::difference_type i, std::vector< std::shared_ptr< teca_dataset > >::difference_type j)

        Parameters:
            i: std::vector< std::shared_ptr< teca_dataset > >::difference_type
            j: std::vector< std::shared_ptr< teca_dataset > >::difference_type

        """
        return _teca_py_data.std_vector_dataset___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::difference_type i, std::vector< std::shared_ptr< teca_dataset > >::difference_type j)

        Parameters:
            i: std::vector< std::shared_ptr< teca_dataset > >::difference_type
            j: std::vector< std::shared_ptr< teca_dataset > >::difference_type

        """
        return _teca_py_data.std_vector_dataset___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::difference_type i)

        Parameters:
            i: std::vector< std::shared_ptr< teca_dataset > >::difference_type

        __delitem__(std_vector_dataset self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        """
        return _teca_py_data.std_vector_dataset___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(std_vector_dataset self, PySliceObject * slice) -> std_vector_dataset

        Parameters:
            slice: PySliceObject *

        __getitem__(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::difference_type i) -> std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        Parameters:
            i: std::vector< std::shared_ptr< teca_dataset > >::difference_type

        """
        return _teca_py_data.std_vector_dataset___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(std_vector_dataset self, PySliceObject * slice, std_vector_dataset v)

        Parameters:
            slice: PySliceObject *
            v: std::vector< std::shared_ptr< teca_dataset >,std::allocator< std::shared_ptr< teca_dataset > > > const &

        __setitem__(std_vector_dataset self, PySliceObject * slice)

        Parameters:
            slice: PySliceObject *

        __setitem__(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::difference_type i, std::vector< std::shared_ptr< teca_dataset > >::value_type const & x)

        Parameters:
            i: std::vector< std::shared_ptr< teca_dataset > >::difference_type
            x: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        """
        return _teca_py_data.std_vector_dataset___setitem__(self, *args)


    def append(self, x):
        """
        append(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::value_type const & x)

        Parameters:
            x: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        """
        return _teca_py_data.std_vector_dataset_append(self, x)


    def empty(self):
        """
        empty(std_vector_dataset self) -> bool

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset_empty(self)


    def size(self):
        """
        size(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::size_type

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset_size(self)


    def clear(self):
        """
        clear(std_vector_dataset self)

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_clear(self)


    def swap(self, v):
        """
        swap(std_vector_dataset self, std_vector_dataset v)

        Parameters:
            v: std::vector< std::shared_ptr< teca_dataset > > &

        """
        return _teca_py_data.std_vector_dataset_swap(self, v)


    def get_allocator(self):
        """
        get_allocator(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::allocator_type

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset_get_allocator(self)


    def begin(self):
        """
        begin(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::iterator

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_begin(self)


    def end(self):
        """
        end(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::iterator

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_end(self)


    def rbegin(self):
        """
        rbegin(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::reverse_iterator

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_rbegin(self)


    def rend(self):
        """
        rend(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::reverse_iterator

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_rend(self)


    def pop_back(self):
        """
        pop_back(std_vector_dataset self)

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > *

        """
        return _teca_py_data.std_vector_dataset_pop_back(self)


    def erase(self, *args):
        """
        erase(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::iterator pos) -> std::vector< std::shared_ptr< teca_dataset > >::iterator

        Parameters:
            pos: std::vector< std::shared_ptr< teca_dataset > >::iterator

        erase(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::iterator first, std::vector< std::shared_ptr< teca_dataset > >::iterator last) -> std::vector< std::shared_ptr< teca_dataset > >::iterator

        Parameters:
            first: std::vector< std::shared_ptr< teca_dataset > >::iterator
            last: std::vector< std::shared_ptr< teca_dataset > >::iterator

        """
        return _teca_py_data.std_vector_dataset_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::shared_ptr<(teca_dataset)>)> self) -> std_vector_dataset
        __init__(std::vector<(std::shared_ptr<(teca_dataset)>)> self, std_vector_dataset arg2) -> std_vector_dataset

        Parameters:
            arg2: std::vector< std::shared_ptr< teca_dataset > > const &

        __init__(std::vector<(std::shared_ptr<(teca_dataset)>)> self, std::vector< std::shared_ptr< teca_dataset > >::size_type size) -> std_vector_dataset

        Parameters:
            size: std::vector< std::shared_ptr< teca_dataset > >::size_type

        __init__(std::vector<(std::shared_ptr<(teca_dataset)>)> self, std::vector< std::shared_ptr< teca_dataset > >::size_type size, std::vector< std::shared_ptr< teca_dataset > >::value_type const & value) -> std_vector_dataset

        Parameters:
            size: std::vector< std::shared_ptr< teca_dataset > >::size_type
            value: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        """
        this = _teca_py_data.new_std_vector_dataset(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """
        push_back(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::value_type const & x)

        Parameters:
            x: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        """
        return _teca_py_data.std_vector_dataset_push_back(self, x)


    def front(self):
        """
        front(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset_front(self)


    def back(self):
        """
        back(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset_back(self)


    def assign(self, n, x):
        """
        assign(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::size_type n, std::vector< std::shared_ptr< teca_dataset > >::value_type const & x)

        Parameters:
            n: std::vector< std::shared_ptr< teca_dataset > >::size_type
            x: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        """
        return _teca_py_data.std_vector_dataset_assign(self, n, x)


    def resize(self, *args):
        """
        resize(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::size_type new_size)

        Parameters:
            new_size: std::vector< std::shared_ptr< teca_dataset > >::size_type

        resize(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::size_type new_size, std::vector< std::shared_ptr< teca_dataset > >::value_type const & x)

        Parameters:
            new_size: std::vector< std::shared_ptr< teca_dataset > >::size_type
            x: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        """
        return _teca_py_data.std_vector_dataset_resize(self, *args)


    def insert(self, *args):
        """
        insert(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::iterator pos, std::vector< std::shared_ptr< teca_dataset > >::value_type const & x) -> std::vector< std::shared_ptr< teca_dataset > >::iterator

        Parameters:
            pos: std::vector< std::shared_ptr< teca_dataset > >::iterator
            x: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        insert(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::iterator pos, std::vector< std::shared_ptr< teca_dataset > >::size_type n, std::vector< std::shared_ptr< teca_dataset > >::value_type const & x)

        Parameters:
            pos: std::vector< std::shared_ptr< teca_dataset > >::iterator
            n: std::vector< std::shared_ptr< teca_dataset > >::size_type
            x: std::vector< std::shared_ptr< teca_dataset > >::value_type const &

        """
        return _teca_py_data.std_vector_dataset_insert(self, *args)


    def reserve(self, n):
        """
        reserve(std_vector_dataset self, std::vector< std::shared_ptr< teca_dataset > >::size_type n)

        Parameters:
            n: std::vector< std::shared_ptr< teca_dataset > >::size_type

        """
        return _teca_py_data.std_vector_dataset_reserve(self, n)


    def capacity(self):
        """
        capacity(std_vector_dataset self) -> std::vector< std::shared_ptr< teca_dataset > >::size_type

        Parameters:
            self: std::vector< std::shared_ptr< teca_dataset > > const *

        """
        return _teca_py_data.std_vector_dataset_capacity(self)

    __swig_destroy__ = _teca_py_data.delete_std_vector_dataset
    __del__ = lambda self: None
std_vector_dataset_swigregister = _teca_py_data.std_vector_dataset_swigregister
std_vector_dataset_swigregister(std_vector_dataset)

class teca_algorithm_executive(_object):
    """Proxy of C++ teca_algorithm_executive class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_algorithm_executive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_algorithm_executive, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> p_teca_algorithm_executive"""
        return _teca_py_data.teca_algorithm_executive_New()

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_algorithm_executive
    __del__ = lambda self: None

    def initialize(self, md):
        """
        initialize(teca_algorithm_executive self, teca_metadata md) -> int

        Parameters:
            md: teca_metadata const &

        """
        return _teca_py_data.teca_algorithm_executive_initialize(self, md)


    def get_next_request(self):
        """
        get_next_request(teca_algorithm_executive self) -> teca_metadata

        Parameters:
            self: teca_algorithm_executive *

        """
        return _teca_py_data.teca_algorithm_executive_get_next_request(self)

teca_algorithm_executive_swigregister = _teca_py_data.teca_algorithm_executive_swigregister
teca_algorithm_executive_swigregister(teca_algorithm_executive)

def teca_algorithm_executive_New():
    """teca_algorithm_executive_New() -> p_teca_algorithm_executive"""
    return _teca_py_data.teca_algorithm_executive_New()

class teca_time_step_executive(teca_algorithm_executive):
    """Proxy of C++ teca_time_step_executive class"""
    __swig_setmethods__ = {}
    for _s in [teca_algorithm_executive]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_time_step_executive, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_algorithm_executive]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_time_step_executive, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> p_teca_time_step_executive"""
        return _teca_py_data.teca_time_step_executive_New()

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New

    def initialize(self, md):
        """
        initialize(teca_time_step_executive self, teca_metadata md) -> int

        Parameters:
            md: teca_metadata const &

        """
        return _teca_py_data.teca_time_step_executive_initialize(self, md)


    def get_next_request(self):
        """
        get_next_request(teca_time_step_executive self) -> teca_metadata

        Parameters:
            self: teca_time_step_executive *

        """
        return _teca_py_data.teca_time_step_executive_get_next_request(self)


    def set_step(self, s):
        """
        set_step(teca_time_step_executive self, long s)

        Parameters:
            s: long

        """
        return _teca_py_data.teca_time_step_executive_set_step(self, s)


    def set_first_step(self, s):
        """
        set_first_step(teca_time_step_executive self, long s)

        Parameters:
            s: long

        """
        return _teca_py_data.teca_time_step_executive_set_first_step(self, s)


    def set_last_step(self, s):
        """
        set_last_step(teca_time_step_executive self, long s)

        Parameters:
            s: long

        """
        return _teca_py_data.teca_time_step_executive_set_last_step(self, s)


    def set_stride(self, s):
        """
        set_stride(teca_time_step_executive self, long s)

        Parameters:
            s: long

        """
        return _teca_py_data.teca_time_step_executive_set_stride(self, s)


    def set_extent(self, *args):
        """
        set_extent(teca_time_step_executive self, unsigned long * ext)

        Parameters:
            ext: unsigned long *

        set_extent(teca_time_step_executive self, std::vector< unsigned long,std::allocator< unsigned long > > const & ext)

        Parameters:
            ext: std::vector< unsigned long,std::allocator< unsigned long > > const &

        """
        return _teca_py_data.teca_time_step_executive_set_extent(self, *args)


    def set_arrays(self, arrays):
        """
        set_arrays(teca_time_step_executive self, std_vector_string arrays)

        Parameters:
            arrays: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _teca_py_data.teca_time_step_executive_set_arrays(self, arrays)

    __swig_destroy__ = _teca_py_data.delete_teca_time_step_executive
    __del__ = lambda self: None
teca_time_step_executive_swigregister = _teca_py_data.teca_time_step_executive_swigregister
teca_time_step_executive_swigregister(teca_time_step_executive)

def teca_time_step_executive_New():
    """teca_time_step_executive_New() -> p_teca_time_step_executive"""
    return _teca_py_data.teca_time_step_executive_New()

class teca_output_port_type(_object):
    """Proxy of C++ std::pair<(std::shared_ptr<(teca_algorithm)>,unsigned int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_output_port_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_output_port_type, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::pair<(std::shared_ptr<(teca_algorithm)>,unsigned int)> self) -> teca_output_port_type
        __init__(std::pair<(std::shared_ptr<(teca_algorithm)>,unsigned int)> self, std::shared_ptr< teca_algorithm > first, unsigned int second) -> teca_output_port_type

        Parameters:
            first: std::shared_ptr< teca_algorithm >
            second: unsigned int

        __init__(std::pair<(std::shared_ptr<(teca_algorithm)>,unsigned int)> self, teca_output_port_type p) -> teca_output_port_type

        Parameters:
            p: std::pair< std::shared_ptr< teca_algorithm >,unsigned int > const &

        """
        this = _teca_py_data.new_teca_output_port_type(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["first"] = _teca_py_data.teca_output_port_type_first_set
    __swig_getmethods__["first"] = _teca_py_data.teca_output_port_type_first_get
    if _newclass:
        first = _swig_property(_teca_py_data.teca_output_port_type_first_get, _teca_py_data.teca_output_port_type_first_set)
    __swig_setmethods__["second"] = _teca_py_data.teca_output_port_type_second_set
    __swig_getmethods__["second"] = _teca_py_data.teca_output_port_type_second_get
    if _newclass:
        second = _swig_property(_teca_py_data.teca_output_port_type_second_get, _teca_py_data.teca_output_port_type_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _teca_py_data.delete_teca_output_port_type
    __del__ = lambda self: None
teca_output_port_type_swigregister = _teca_py_data.teca_output_port_type_swigregister
teca_output_port_type_swigregister(teca_output_port_type)

class teca_algorithm(_object):
    """Proxy of C++ teca_algorithm class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_algorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_algorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> p_teca_algorithm"""
        return _teca_py_data.teca_algorithm_New()

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_algorithm
    __del__ = lambda self: None

    def get_properties_description(self, arg2, arg3):
        """
        get_properties_description(teca_algorithm self, std::string const & arg2, options_description & arg3)

        Parameters:
            arg2: std::string const &
            arg3: options_description &

        """
        return _teca_py_data.teca_algorithm_get_properties_description(self, arg2, arg3)


    def set_properties(self, arg2, arg3):
        """
        set_properties(teca_algorithm self, std::string const & arg2, variables_map & arg3)

        Parameters:
            arg2: std::string const &
            arg3: variables_map &

        """
        return _teca_py_data.teca_algorithm_set_properties(self, arg2, arg3)


    def get_output_port(self, port=0):
        """
        get_output_port(teca_algorithm self, unsigned int port=0) -> teca_output_port_type

        Parameters:
            port: unsigned int

        get_output_port(teca_algorithm self) -> teca_output_port_type

        Parameters:
            self: teca_algorithm *

        """
        return _teca_py_data.teca_algorithm_get_output_port(self, port)


    def set_input_connection(self, *args):
        """
        set_input_connection(teca_algorithm self, teca_output_port_type port)

        Parameters:
            port: teca_algorithm_output_port const &

        set_input_connection(teca_algorithm self, unsigned int id, teca_output_port_type port)

        Parameters:
            id: unsigned int
            port: teca_algorithm_output_port const &

        """
        return _teca_py_data.teca_algorithm_set_input_connection(self, *args)


    def remove_input_connection(self, id):
        """
        remove_input_connection(teca_algorithm self, unsigned int id)

        Parameters:
            id: unsigned int

        """
        return _teca_py_data.teca_algorithm_remove_input_connection(self, id)


    def clear_input_connections(self):
        """
        clear_input_connections(teca_algorithm self)

        Parameters:
            self: teca_algorithm *

        """
        return _teca_py_data.teca_algorithm_clear_input_connections(self)


    def get_output_data(self, port=0):
        """
        get_output_data(teca_algorithm self, unsigned int port=0) -> const_p_teca_dataset

        Parameters:
            port: unsigned int

        get_output_data(teca_algorithm self) -> const_p_teca_dataset

        Parameters:
            self: teca_algorithm *

        """
        return _teca_py_data.teca_algorithm_get_output_data(self, port)


    def pop_cache(self, port=0, top=0):
        """
        pop_cache(teca_algorithm self, unsigned int port=0, int top=0)

        Parameters:
            port: unsigned int
            top: int

        pop_cache(teca_algorithm self, unsigned int port=0)

        Parameters:
            port: unsigned int

        pop_cache(teca_algorithm self)

        Parameters:
            self: teca_algorithm *

        """
        return _teca_py_data.teca_algorithm_pop_cache(self, port, top)


    def set_cache_size(self, n):
        """
        set_cache_size(teca_algorithm self, unsigned int n)

        Parameters:
            n: unsigned int

        """
        return _teca_py_data.teca_algorithm_set_cache_size(self, n)


    def update(self, *args):
        """
        update(teca_algorithm self) -> int
        update(teca_algorithm self, unsigned int port) -> int

        Parameters:
            port: unsigned int

        """
        return _teca_py_data.teca_algorithm_update(self, *args)


    def update_metadata(self, port):
        """
        update_metadata(teca_algorithm self, unsigned int port) -> teca_metadata

        Parameters:
            port: unsigned int

        """
        return _teca_py_data.teca_algorithm_update_metadata(self, port)


    def set_executive(self, arg2):
        """
        set_executive(teca_algorithm self, p_teca_algorithm_executive arg2)

        Parameters:
            exec: p_teca_algorithm_executive

        """
        return _teca_py_data.teca_algorithm_set_executive(self, arg2)


    def get_executive(self):
        """
        get_executive(teca_algorithm self) -> p_teca_algorithm_executive

        Parameters:
            self: teca_algorithm *

        """
        return _teca_py_data.teca_algorithm_get_executive(self)


    def to_stream(self, os):
        """
        to_stream(teca_algorithm self, std::ostream & os)

        Parameters:
            os: std::ostream &

        """
        return _teca_py_data.teca_algorithm_to_stream(self, os)


    def from_stream(self, arg2):
        """
        from_stream(teca_algorithm self, std::istream & arg2)

        Parameters:
            is: std::istream &

        """
        return _teca_py_data.teca_algorithm_from_stream(self, arg2)

teca_algorithm_swigregister = _teca_py_data.teca_algorithm_swigregister
teca_algorithm_swigregister(teca_algorithm)

def teca_algorithm_New():
    """teca_algorithm_New() -> p_teca_algorithm"""
    return _teca_py_data.teca_algorithm_New()

class teca_threaded_algorithm(teca_algorithm):
    """Proxy of C++ teca_threaded_algorithm class"""
    __swig_setmethods__ = {}
    for _s in [teca_algorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_threaded_algorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_algorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_threaded_algorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> p_teca_threaded_algorithm"""
        return _teca_py_data.teca_threaded_algorithm_New()

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_threaded_algorithm
    __del__ = lambda self: None

    def set_thread_pool_size(self, n_threads):
        """
        set_thread_pool_size(teca_threaded_algorithm self, int n_threads)

        Parameters:
            n_threads: int

        """
        return _teca_py_data.teca_threaded_algorithm_set_thread_pool_size(self, n_threads)


    def get_thread_pool_size(self):
        """
        get_thread_pool_size(teca_threaded_algorithm self) -> unsigned int

        Parameters:
            self: teca_threaded_algorithm const *

        """
        return _teca_py_data.teca_threaded_algorithm_get_thread_pool_size(self)

teca_threaded_algorithm_swigregister = _teca_py_data.teca_threaded_algorithm_swigregister
teca_threaded_algorithm_swigregister(teca_threaded_algorithm)

def teca_threaded_algorithm_New():
    """teca_threaded_algorithm_New() -> p_teca_threaded_algorithm"""
    return _teca_py_data.teca_threaded_algorithm_New()

class teca_temporal_reduction(teca_threaded_algorithm):
    """Proxy of C++ teca_temporal_reduction class"""
    __swig_setmethods__ = {}
    for _s in [teca_threaded_algorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_temporal_reduction, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_threaded_algorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_temporal_reduction, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_data.delete_teca_temporal_reduction
    __del__ = lambda self: None

    def set_first_step(self, v):
        """
        set_first_step(teca_temporal_reduction self, long const & v)

        Parameters:
            v: long const &

        """
        return _teca_py_data.teca_temporal_reduction_set_first_step(self, v)


    def get_first_step(self, *args):
        """
        get_first_step(teca_temporal_reduction self) -> long const
        get_first_step(teca_temporal_reduction self) -> long &

        Parameters:
            self: teca_temporal_reduction *

        """
        return _teca_py_data.teca_temporal_reduction_get_first_step(self, *args)


    def set_last_step(self, v):
        """
        set_last_step(teca_temporal_reduction self, long const & v)

        Parameters:
            v: long const &

        """
        return _teca_py_data.teca_temporal_reduction_set_last_step(self, v)


    def get_last_step(self, *args):
        """
        get_last_step(teca_temporal_reduction self) -> long const
        get_last_step(teca_temporal_reduction self) -> long &

        Parameters:
            self: teca_temporal_reduction *

        """
        return _teca_py_data.teca_temporal_reduction_get_last_step(self, *args)

teca_temporal_reduction_swigregister = _teca_py_data.teca_temporal_reduction_swigregister
teca_temporal_reduction_swigregister(teca_temporal_reduction)

class teca_array_collection(_object):
    """Proxy of C++ teca_array_collection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_array_collection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_array_collection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> p_teca_array_collection"""
        return _teca_py_data.teca_array_collection_New()

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New

    def clear(self):
        """
        clear(teca_array_collection self)

        Parameters:
            self: teca_array_collection *

        """
        return _teca_py_data.teca_array_collection_clear(self)


    def append(self, *args):
        """
        append(teca_array_collection self, p_teca_variant_array array) -> int

        Parameters:
            array: p_teca_variant_array

        append(teca_array_collection self, std::string const & name, p_teca_variant_array array) -> int

        Parameters:
            name: std::string const &
            array: p_teca_variant_array

        """
        return _teca_py_data.teca_array_collection_append(self, *args)


    def set(self, *args):
        """
        set(teca_array_collection self, unsigned int i, p_teca_variant_array array) -> int

        Parameters:
            i: unsigned int
            array: p_teca_variant_array

        set(teca_array_collection self, std::string const & name, p_teca_variant_array array) -> int

        Parameters:
            name: std::string const &
            array: p_teca_variant_array

        """
        return _teca_py_data.teca_array_collection_set(self, *args)


    def remove(self, *args):
        """
        remove(teca_array_collection self, unsigned int i) -> int

        Parameters:
            i: unsigned int

        remove(teca_array_collection self, std::string const & name) -> int

        Parameters:
            name: std::string const &

        """
        return _teca_py_data.teca_array_collection_remove(self, *args)


    def size(self):
        """
        size(teca_array_collection self) -> unsigned int

        Parameters:
            self: teca_array_collection const *

        """
        return _teca_py_data.teca_array_collection_size(self)


    def get(self, *args):
        """
        get(teca_array_collection self, unsigned int i) -> p_teca_variant_array

        Parameters:
            i: unsigned int

        get(teca_array_collection self, unsigned int i) -> const_p_teca_variant_array

        Parameters:
            i: unsigned int

        get(teca_array_collection self, std::string const name) -> p_teca_variant_array

        Parameters:
            name: std::string const

        get(teca_array_collection self, std::string const name) -> const_p_teca_variant_array

        Parameters:
            name: std::string const

        """
        return _teca_py_data.teca_array_collection_get(self, *args)


    def get_name(self, *args):
        """
        get_name(teca_array_collection self, unsigned int i) -> std::string

        Parameters:
            i: unsigned int

        get_name(teca_array_collection self, unsigned int i) -> std::string const &

        Parameters:
            i: unsigned int

        """
        return _teca_py_data.teca_array_collection_get_name(self, *args)


    def copy(self, other):
        """
        copy(teca_array_collection self, const_p_teca_array_collection const & other)

        Parameters:
            other: const_p_teca_array_collection const &

        """
        return _teca_py_data.teca_array_collection_copy(self, other)


    def shallow_copy(self, other):
        """
        shallow_copy(teca_array_collection self, p_teca_array_collection const & other)

        Parameters:
            other: p_teca_array_collection const &

        """
        return _teca_py_data.teca_array_collection_shallow_copy(self, other)


    def swap(self, other):
        """
        swap(teca_array_collection self, p_teca_array_collection & other)

        Parameters:
            other: p_teca_array_collection &

        """
        return _teca_py_data.teca_array_collection_swap(self, other)


    def to_stream(self, s):
        """
        to_stream(teca_array_collection self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        """
        return _teca_py_data.teca_array_collection_to_stream(self, s)


    def from_stream(self, s):
        """
        from_stream(teca_array_collection self, teca_binary_stream & s)

        Parameters:
            s: teca_binary_stream &

        """
        return _teca_py_data.teca_array_collection_from_stream(self, s)


    def __str__(self):
        """
        __str__(teca_array_collection self) -> PyObject *

        Parameters:
            self: teca_array_collection *

        """
        return _teca_py_data.teca_array_collection___str__(self)


    def __setitem__(self, name, array):
        """
        __setitem__(teca_array_collection self, std::string const & name, PyObject * array)

        Parameters:
            name: std::string const &
            array: PyObject *

        """
        return _teca_py_data.teca_array_collection___setitem__(self, name, array)


    def __getitem__(self, name):
        """
        __getitem__(teca_array_collection self, std::string const & name) -> PyObject *

        Parameters:
            name: std::string const &

        """
        return _teca_py_data.teca_array_collection___getitem__(self, name)

    __swig_destroy__ = _teca_py_data.delete_teca_array_collection
    __del__ = lambda self: None
teca_array_collection_swigregister = _teca_py_data.teca_array_collection_swigregister
teca_array_collection_swigregister(teca_array_collection)

def teca_array_collection_New():
    """teca_array_collection_New() -> p_teca_array_collection"""
    return _teca_py_data.teca_array_collection_New()

class teca_mesh(teca_dataset):
    """Proxy of C++ teca_mesh class"""
    __swig_setmethods__ = {}
    for _s in [teca_dataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_dataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_mesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_data.delete_teca_mesh
    __del__ = lambda self: None

    def get_metadata(self, *args):
        """
        get_metadata(teca_mesh self) -> teca_metadata
        get_metadata(teca_mesh self) -> teca_metadata

        Parameters:
            self: teca_mesh const *

        """
        return _teca_py_data.teca_mesh_get_metadata(self, *args)


    def get_point_arrays(self, *args):
        """
        get_point_arrays(teca_mesh self) -> p_teca_array_collection
        get_point_arrays(teca_mesh self) -> const_p_teca_array_collection

        Parameters:
            self: teca_mesh const *

        """
        return _teca_py_data.teca_mesh_get_point_arrays(self, *args)


    def get_cell_arrays(self, *args):
        """
        get_cell_arrays(teca_mesh self) -> p_teca_array_collection
        get_cell_arrays(teca_mesh self) -> const_p_teca_array_collection

        Parameters:
            self: teca_mesh const *

        """
        return _teca_py_data.teca_mesh_get_cell_arrays(self, *args)


    def get_edge_arrays(self, *args):
        """
        get_edge_arrays(teca_mesh self) -> p_teca_array_collection
        get_edge_arrays(teca_mesh self) -> const_p_teca_array_collection

        Parameters:
            self: teca_mesh const *

        """
        return _teca_py_data.teca_mesh_get_edge_arrays(self, *args)


    def get_face_arrays(self, *args):
        """
        get_face_arrays(teca_mesh self) -> p_teca_array_collection
        get_face_arrays(teca_mesh self) -> const_p_teca_array_collection

        Parameters:
            self: teca_mesh const *

        """
        return _teca_py_data.teca_mesh_get_face_arrays(self, *args)


    def get_information_arrays(self, *args):
        """
        get_information_arrays(teca_mesh self) -> p_teca_array_collection
        get_information_arrays(teca_mesh self) -> const_p_teca_array_collection

        Parameters:
            self: teca_mesh const *

        """
        return _teca_py_data.teca_mesh_get_information_arrays(self, *args)


    def empty(self):
        """
        empty(teca_mesh self) -> bool

        Parameters:
            self: teca_mesh const *

        """
        return _teca_py_data.teca_mesh_empty(self)


    def copy_metadata(self, arg2):
        """
        copy_metadata(teca_mesh self, const_p_teca_dataset const & arg2)

        Parameters:
            arg2: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_mesh_copy_metadata(self, arg2)


    def copy(self, arg2):
        """
        copy(teca_mesh self, const_p_teca_dataset const & arg2)

        Parameters:
            arg2: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_mesh_copy(self, arg2)


    def shallow_copy(self, arg2):
        """
        shallow_copy(teca_mesh self, p_teca_dataset const & arg2)

        Parameters:
            arg2: p_teca_dataset const &

        """
        return _teca_py_data.teca_mesh_shallow_copy(self, arg2)


    def swap(self, arg2):
        """
        swap(teca_mesh self, p_teca_dataset & arg2)

        Parameters:
            arg2: p_teca_dataset &

        """
        return _teca_py_data.teca_mesh_swap(self, arg2)


    def to_stream(self, *args):
        """
        to_stream(teca_mesh self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        to_stream(teca_mesh self, std::ostream & arg2)

        Parameters:
            arg2: std::ostream &

        """
        return _teca_py_data.teca_mesh_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_mesh self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        from_stream(teca_mesh self, std::istream & arg2)

        Parameters:
            arg2: std::istream &

        """
        return _teca_py_data.teca_mesh_from_stream(self, *args)

    __swig_setmethods__["m_impl"] = _teca_py_data.teca_mesh_m_impl_set
    __swig_getmethods__["m_impl"] = _teca_py_data.teca_mesh_m_impl_get
    if _newclass:
        m_impl = _swig_property(_teca_py_data.teca_mesh_m_impl_get, _teca_py_data.teca_mesh_m_impl_set)
teca_mesh_swigregister = _teca_py_data.teca_mesh_swigregister
teca_mesh_swigregister(teca_mesh)


def as_teca_mesh(in_inst):
    """
    as_teca_mesh(p_teca_dataset in_inst) -> p_teca_mesh

    Parameters:
        in_inst: p_teca_dataset

    """
    return _teca_py_data.as_teca_mesh(in_inst)

def as_const_teca_mesh(inst):
    """
    as_const_teca_mesh(const_p_teca_dataset inst) -> const_p_teca_mesh

    Parameters:
        inst: const_p_teca_dataset

    """
    return _teca_py_data.as_const_teca_mesh(inst)
class teca_cartesian_mesh(teca_mesh):
    """Proxy of C++ teca_cartesian_mesh class"""
    __swig_setmethods__ = {}
    for _s in [teca_mesh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_cartesian_mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_mesh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_cartesian_mesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> p_teca_cartesian_mesh"""
        return _teca_py_data.teca_cartesian_mesh_New()

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_cartesian_mesh
    __del__ = lambda self: None

    def set_time(self, *args):
        """
        set_time(teca_cartesian_mesh self, std_vector_double vals)

        Parameters:
            vals: std::vector< double,std::allocator< double > > const &

        set_time(teca_cartesian_mesh self, double const * vals)

        Parameters:
            vals: double const *

        set_time(teca_cartesian_mesh self, double const & val_1)

        Parameters:
            val_1: double const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_time(self, *args)


    def get_time(self, *args):
        """
        get_time(teca_cartesian_mesh self, std_vector_double vals) -> int

        Parameters:
            vals: std::vector< double,std::allocator< double > > &

        get_time(teca_cartesian_mesh self, double & val_1) -> int

        Parameters:
            val_1: double &

        """
        return _teca_py_data.teca_cartesian_mesh_get_time(self, *args)


    def set_calendar(self, *args):
        """
        set_calendar(teca_cartesian_mesh self, std_vector_string vals)

        Parameters:
            vals: std::vector< std::string,std::allocator< std::string > > const &

        set_calendar(teca_cartesian_mesh self, std::string const & val_1)

        Parameters:
            val_1: std::string const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_calendar(self, *args)


    def get_calendar(self, *args):
        """
        get_calendar(teca_cartesian_mesh self, std_vector_string vals) -> int

        Parameters:
            vals: std::vector< std::string,std::allocator< std::string > > &

        get_calendar(teca_cartesian_mesh self, std::string * vals) -> int

        Parameters:
            vals: std::string *

        get_calendar(teca_cartesian_mesh self, std::string & val_1) -> int

        Parameters:
            val_1: std::string &

        """
        return _teca_py_data.teca_cartesian_mesh_get_calendar(self, *args)


    def set_time_units(self, *args):
        """
        set_time_units(teca_cartesian_mesh self, std_vector_string vals)

        Parameters:
            vals: std::vector< std::string,std::allocator< std::string > > const &

        set_time_units(teca_cartesian_mesh self, std::string const & val_1)

        Parameters:
            val_1: std::string const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_time_units(self, *args)


    def get_time_units(self, *args):
        """
        get_time_units(teca_cartesian_mesh self, std_vector_string vals) -> int

        Parameters:
            vals: std::vector< std::string,std::allocator< std::string > > &

        get_time_units(teca_cartesian_mesh self, std::string * vals) -> int

        Parameters:
            vals: std::string *

        get_time_units(teca_cartesian_mesh self, std::string & val_1) -> int

        Parameters:
            val_1: std::string &

        """
        return _teca_py_data.teca_cartesian_mesh_get_time_units(self, *args)


    def set_time_step(self, *args):
        """
        set_time_step(teca_cartesian_mesh self, std::vector< unsigned long,std::allocator< unsigned long > > const & vals)

        Parameters:
            vals: std::vector< unsigned long,std::allocator< unsigned long > > const &

        set_time_step(teca_cartesian_mesh self, unsigned long const * vals)

        Parameters:
            vals: unsigned long const *

        set_time_step(teca_cartesian_mesh self, unsigned long const & val_1)

        Parameters:
            val_1: unsigned long const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_time_step(self, *args)


    def get_time_step(self, *args):
        """
        get_time_step(teca_cartesian_mesh self, std::vector< unsigned long,std::allocator< unsigned long > > & vals) -> int

        Parameters:
            vals: std::vector< unsigned long,std::allocator< unsigned long > > &

        get_time_step(teca_cartesian_mesh self, unsigned long & val_1) -> int

        Parameters:
            val_1: unsigned long &

        """
        return _teca_py_data.teca_cartesian_mesh_get_time_step(self, *args)


    def get_whole_extent(self, *args):
        """
        get_whole_extent(teca_cartesian_mesh self, std::vector< unsigned long,std::allocator< unsigned long > > & vals) -> int

        Parameters:
            vals: std::vector< unsigned long,std::allocator< unsigned long > > &

        get_whole_extent(teca_cartesian_mesh self, unsigned long * vals) -> int

        Parameters:
            vals: unsigned long *

        """
        return _teca_py_data.teca_cartesian_mesh_get_whole_extent(self, *args)


    def set_whole_extent(self, *args):
        """
        set_whole_extent(teca_cartesian_mesh self, std::vector< unsigned long,std::allocator< unsigned long > > const & vals)

        Parameters:
            vals: std::vector< unsigned long,std::allocator< unsigned long > > const &

        set_whole_extent(teca_cartesian_mesh self, unsigned long const * vals)

        Parameters:
            vals: unsigned long const *

        set_whole_extent(teca_cartesian_mesh self, unsigned long const & val_1, unsigned long const & val_2, unsigned long const & val_3, unsigned long const & val_4, unsigned long const & val_5, unsigned long const & val_6)

        Parameters:
            val_1: unsigned long const &
            val_2: unsigned long const &
            val_3: unsigned long const &
            val_4: unsigned long const &
            val_5: unsigned long const &
            val_6: unsigned long const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_whole_extent(self, *args)


    def get_extent(self, *args):
        """
        get_extent(teca_cartesian_mesh self, std::vector< unsigned long,std::allocator< unsigned long > > & vals) -> int

        Parameters:
            vals: std::vector< unsigned long,std::allocator< unsigned long > > &

        get_extent(teca_cartesian_mesh self, unsigned long * vals) -> int

        Parameters:
            vals: unsigned long *

        """
        return _teca_py_data.teca_cartesian_mesh_get_extent(self, *args)


    def set_extent(self, *args):
        """
        set_extent(teca_cartesian_mesh self, std::vector< unsigned long,std::allocator< unsigned long > > const & vals)

        Parameters:
            vals: std::vector< unsigned long,std::allocator< unsigned long > > const &

        set_extent(teca_cartesian_mesh self, unsigned long const * vals)

        Parameters:
            vals: unsigned long const *

        set_extent(teca_cartesian_mesh self, unsigned long const & val_1, unsigned long const & val_2, unsigned long const & val_3, unsigned long const & val_4, unsigned long const & val_5, unsigned long const & val_6)

        Parameters:
            val_1: unsigned long const &
            val_2: unsigned long const &
            val_3: unsigned long const &
            val_4: unsigned long const &
            val_5: unsigned long const &
            val_6: unsigned long const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_extent(self, *args)


    def get_x_coordinates(self, *args):
        """
        get_x_coordinates(teca_cartesian_mesh self) -> p_teca_variant_array
        get_x_coordinates(teca_cartesian_mesh self) -> const_p_teca_variant_array

        Parameters:
            self: teca_cartesian_mesh const *

        """
        return _teca_py_data.teca_cartesian_mesh_get_x_coordinates(self, *args)


    def get_y_coordinates(self, *args):
        """
        get_y_coordinates(teca_cartesian_mesh self) -> p_teca_variant_array
        get_y_coordinates(teca_cartesian_mesh self) -> const_p_teca_variant_array

        Parameters:
            self: teca_cartesian_mesh const *

        """
        return _teca_py_data.teca_cartesian_mesh_get_y_coordinates(self, *args)


    def get_z_coordinates(self, *args):
        """
        get_z_coordinates(teca_cartesian_mesh self) -> p_teca_variant_array
        get_z_coordinates(teca_cartesian_mesh self) -> const_p_teca_variant_array

        Parameters:
            self: teca_cartesian_mesh const *

        """
        return _teca_py_data.teca_cartesian_mesh_get_z_coordinates(self, *args)


    def set_x_coordinates(self, a):
        """
        set_x_coordinates(teca_cartesian_mesh self, p_teca_variant_array const & a)

        Parameters:
            a: p_teca_variant_array const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_x_coordinates(self, a)


    def set_y_coordinates(self, a):
        """
        set_y_coordinates(teca_cartesian_mesh self, p_teca_variant_array const & a)

        Parameters:
            a: p_teca_variant_array const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_y_coordinates(self, a)


    def set_z_coordinates(self, a):
        """
        set_z_coordinates(teca_cartesian_mesh self, p_teca_variant_array const & a)

        Parameters:
            a: p_teca_variant_array const &

        """
        return _teca_py_data.teca_cartesian_mesh_set_z_coordinates(self, a)


    def new_instance(self):
        """
        new_instance(teca_cartesian_mesh self) -> p_teca_dataset

        Parameters:
            self: teca_cartesian_mesh const *

        """
        return _teca_py_data.teca_cartesian_mesh_new_instance(self)


    def new_copy(self):
        """
        new_copy(teca_cartesian_mesh self) -> p_teca_dataset

        Parameters:
            self: teca_cartesian_mesh const *

        """
        return _teca_py_data.teca_cartesian_mesh_new_copy(self)


    def copy(self, arg2):
        """
        copy(teca_cartesian_mesh self, const_p_teca_dataset const & arg2)

        Parameters:
            arg2: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_cartesian_mesh_copy(self, arg2)


    def shallow_copy(self, arg2):
        """
        shallow_copy(teca_cartesian_mesh self, p_teca_dataset const & arg2)

        Parameters:
            arg2: p_teca_dataset const &

        """
        return _teca_py_data.teca_cartesian_mesh_shallow_copy(self, arg2)


    def copy_metadata(self, arg2):
        """
        copy_metadata(teca_cartesian_mesh self, const_p_teca_dataset const & arg2)

        Parameters:
            arg2: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_cartesian_mesh_copy_metadata(self, arg2)


    def swap(self, arg2):
        """
        swap(teca_cartesian_mesh self, p_teca_dataset & arg2)

        Parameters:
            arg2: p_teca_dataset &

        """
        return _teca_py_data.teca_cartesian_mesh_swap(self, arg2)


    def to_stream(self, *args):
        """
        to_stream(teca_cartesian_mesh self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        to_stream(teca_cartesian_mesh self, std::ostream & arg2)

        Parameters:
            arg2: std::ostream &

        """
        return _teca_py_data.teca_cartesian_mesh_to_stream(self, *args)


    def from_stream(self, *args):
        """
        from_stream(teca_cartesian_mesh self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        from_stream(teca_cartesian_mesh self, std::istream & arg2)

        Parameters:
            arg2: std::istream &

        """
        return _teca_py_data.teca_cartesian_mesh_from_stream(self, *args)

teca_cartesian_mesh_swigregister = _teca_py_data.teca_cartesian_mesh_swigregister
teca_cartesian_mesh_swigregister(teca_cartesian_mesh)

def teca_cartesian_mesh_New():
    """teca_cartesian_mesh_New() -> p_teca_cartesian_mesh"""
    return _teca_py_data.teca_cartesian_mesh_New()


def as_teca_cartesian_mesh(in_inst):
    """
    as_teca_cartesian_mesh(p_teca_dataset in_inst) -> p_teca_cartesian_mesh

    Parameters:
        in_inst: p_teca_dataset

    """
    return _teca_py_data.as_teca_cartesian_mesh(in_inst)

def as_const_teca_cartesian_mesh(inst):
    """
    as_const_teca_cartesian_mesh(const_p_teca_dataset inst) -> const_p_teca_cartesian_mesh

    Parameters:
        inst: const_p_teca_dataset

    """
    return _teca_py_data.as_const_teca_cartesian_mesh(inst)
class teca_table(teca_dataset):
    """Proxy of C++ teca_table class"""
    __swig_setmethods__ = {}
    for _s in [teca_dataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_table, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_dataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_table, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def New():
        """New() -> p_teca_table"""
        return _teca_py_data.teca_table_New()

    if _newclass:
        New = staticmethod(New)
    __swig_getmethods__["New"] = lambda x: New
    __swig_destroy__ = _teca_py_data.delete_teca_table
    __del__ = lambda self: None

    def new_instance(self):
        """
        new_instance(teca_table self) -> p_teca_dataset

        Parameters:
            self: teca_table const *

        """
        return _teca_py_data.teca_table_new_instance(self)


    def new_copy(self):
        """
        new_copy(teca_table self) -> p_teca_dataset

        Parameters:
            self: teca_table const *

        """
        return _teca_py_data.teca_table_new_copy(self)


    def clear(self):
        """
        clear(teca_table self)

        Parameters:
            self: teca_table *

        """
        return _teca_py_data.teca_table_clear(self)


    def get_number_of_columns(self):
        """
        get_number_of_columns(teca_table self) -> unsigned int

        Parameters:
            self: teca_table const *

        """
        return _teca_py_data.teca_table_get_number_of_columns(self)


    def get_number_of_rows(self):
        """
        get_number_of_rows(teca_table self) -> unsigned long

        Parameters:
            self: teca_table const *

        """
        return _teca_py_data.teca_table_get_number_of_rows(self)


    def get_column(self, *args):
        """
        get_column(teca_table self, unsigned int i) -> p_teca_variant_array

        Parameters:
            i: unsigned int

        get_column(teca_table self, std::string const & col_name) -> p_teca_variant_array

        Parameters:
            col_name: std::string const &

        get_column(teca_table self, unsigned int i) -> const_p_teca_variant_array

        Parameters:
            i: unsigned int

        get_column(teca_table self, std::string const & col_name) -> const_p_teca_variant_array

        Parameters:
            col_name: std::string const &

        """
        return _teca_py_data.teca_table_get_column(self, *args)


    def resize(self, n):
        """
        resize(teca_table self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_table_resize(self, n)


    def reserve(self, n):
        """
        reserve(teca_table self, unsigned long n)

        Parameters:
            n: unsigned long

        """
        return _teca_py_data.teca_table_reserve(self, n)


    def __nonzero__(self):
        return _teca_py_data.teca_table___nonzero__(self)
    __bool__ = __nonzero__



    def empty(self):
        """
        empty(teca_table self) -> bool

        Parameters:
            self: teca_table const *

        """
        return _teca_py_data.teca_table_empty(self)


    def from_stream(self, arg2):
        """
        from_stream(teca_table self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        """
        return _teca_py_data.teca_table_from_stream(self, arg2)


    def to_stream(self, *args):
        """
        to_stream(teca_table self, teca_binary_stream & arg2)

        Parameters:
            arg2: teca_binary_stream &

        to_stream(teca_table self, std::ostream & arg2)

        Parameters:
            arg2: std::ostream &

        """
        return _teca_py_data.teca_table_to_stream(self, *args)


    def copy(self, other):
        """
        copy(teca_table self, const_p_teca_dataset const & other)

        Parameters:
            other: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_table_copy(self, other)


    def shallow_copy(self, other):
        """
        shallow_copy(teca_table self, p_teca_dataset const & other)

        Parameters:
            other: p_teca_dataset const &

        """
        return _teca_py_data.teca_table_shallow_copy(self, other)


    def copy_metadata(self, other):
        """
        copy_metadata(teca_table self, const_p_teca_dataset const & other)

        Parameters:
            other: const_p_teca_dataset const &

        """
        return _teca_py_data.teca_table_copy_metadata(self, other)


    def swap(self, other):
        """
        swap(teca_table self, p_teca_dataset & other)

        Parameters:
            other: p_teca_dataset &

        """
        return _teca_py_data.teca_table_swap(self, other)


    def concatenate(self, other):
        """
        concatenate(teca_table self, const_p_teca_table const & other)

        Parameters:
            other: const_p_teca_table const &

        """
        return _teca_py_data.teca_table_concatenate(self, other)

teca_table_swigregister = _teca_py_data.teca_table_swigregister
teca_table_swigregister(teca_table)

def teca_table_New():
    """teca_table_New() -> p_teca_table"""
    return _teca_py_data.teca_table_New()


def as_teca_table(in_inst):
    """
    as_teca_table(p_teca_dataset in_inst) -> p_teca_table

    Parameters:
        in_inst: p_teca_dataset

    """
    return _teca_py_data.as_teca_table(in_inst)

def as_const_teca_table(inst):
    """
    as_const_teca_table(const_p_teca_dataset inst) -> const_p_teca_table

    Parameters:
        inst: const_p_teca_dataset

    """
    return _teca_py_data.as_const_teca_table(inst)
# This file is compatible with both classic and new-style classes.



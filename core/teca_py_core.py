# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
TECA core module

The core module contains the pipeline and executive
as well as metadata object, variant array and abstract
datasets.

"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_teca_py_core', [dirname(__file__)])
        except ImportError:
            import _teca_py_core
            return _teca_py_core
        if fp is not None:
            try:
                _mod = imp.load_module('_teca_py_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _teca_py_core = swig_import_helper()
    del swig_import_helper
else:
    import _teca_py_core
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_teca_py_core.SHARED_PTR_DISOWN_swigconstant(_teca_py_core)
SHARED_PTR_DISOWN = _teca_py_core.SHARED_PTR_DISOWN
class teca_variant_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_variant_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_variant_array, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_core.delete_teca_variant_array
    __del__ = lambda self: None

    def new_instance(self):
        return _teca_py_core.teca_variant_array_new_instance(self)

    def new_copy(self, *args):
        return _teca_py_core.teca_variant_array_new_copy(self, *args)

    def __eq__(self, other):
        return _teca_py_core.teca_variant_array___eq__(self, other)

    def size(self):
        return _teca_py_core.teca_variant_array_size(self)

    def resize(self, i):
        return _teca_py_core.teca_variant_array_resize(self, i)

    def reserve(self, i):
        return _teca_py_core.teca_variant_array_reserve(self, i)

    def clear(self):
        return _teca_py_core.teca_variant_array_clear(self)

    def swap(self, *args):
        return _teca_py_core.teca_variant_array_swap(self, *args)

    def equal(self, *args):
        return _teca_py_core.teca_variant_array_equal(self, *args)

    def to_stream(self, *args):
        return _teca_py_core.teca_variant_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_variant_array_from_stream(self, *args)

    def type_code(self):
        return _teca_py_core.teca_variant_array_type_code(self)

    def __str__(self):
        return _teca_py_core.teca_variant_array___str__(self)

    def __setitem__(self, i, value):
        return _teca_py_core.teca_variant_array___setitem__(self, i, value)

    def __getitem__(self, i):
        return _teca_py_core.teca_variant_array___getitem__(self, i)

    def as_array(self):
        return _teca_py_core.teca_variant_array_as_array(self)

    def append(self, obj):
        return _teca_py_core.teca_variant_array_append(self, obj)

    def copy(self, *args):
        return _teca_py_core.teca_variant_array_copy(self, *args)
teca_variant_array_swigregister = _teca_py_core.teca_variant_array_swigregister
teca_variant_array_swigregister(teca_variant_array)

class teca_double_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_double_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_double_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_double_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_double_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_double_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_double_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_double_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_double_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_double_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_double_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_double_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_double_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_double_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_double_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_double_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_double_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_double_array_from_stream(self, *args)
teca_double_array_swigregister = _teca_py_core.teca_double_array_swigregister
teca_double_array_swigregister(teca_double_array)

def teca_double_array_New(*args):
    return _teca_py_core.teca_double_array_New(*args)
teca_double_array_New = _teca_py_core.teca_double_array_New

class teca_float_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_float_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_float_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_float_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_float_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_float_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_float_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_float_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_float_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_float_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_float_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_float_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_float_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_float_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_float_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_float_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_float_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_float_array_from_stream(self, *args)
teca_float_array_swigregister = _teca_py_core.teca_float_array_swigregister
teca_float_array_swigregister(teca_float_array)

def teca_float_array_New(*args):
    return _teca_py_core.teca_float_array_New(*args)
teca_float_array_New = _teca_py_core.teca_float_array_New

class teca_int_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_int_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_int_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_int_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_int_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_int_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_int_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_int_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_int_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_int_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_int_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_int_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_int_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_int_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_int_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_int_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_int_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_int_array_from_stream(self, *args)
teca_int_array_swigregister = _teca_py_core.teca_int_array_swigregister
teca_int_array_swigregister(teca_int_array)

def teca_int_array_New(*args):
    return _teca_py_core.teca_int_array_New(*args)
teca_int_array_New = _teca_py_core.teca_int_array_New

class teca_char_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_char_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_char_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_char_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_char_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_char_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_char_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_char_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_char_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_char_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_char_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_char_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_char_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_char_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_char_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_char_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_char_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_char_array_from_stream(self, *args)
teca_char_array_swigregister = _teca_py_core.teca_char_array_swigregister
teca_char_array_swigregister(teca_char_array)

def teca_char_array_New(*args):
    return _teca_py_core.teca_char_array_New(*args)
teca_char_array_New = _teca_py_core.teca_char_array_New

class teca_long_long_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_long_long_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_long_long_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_long_long_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_long_long_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_long_long_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_long_long_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_long_long_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_long_long_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_long_long_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_long_long_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_long_long_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_long_long_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_long_long_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_long_long_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_long_long_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_long_long_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_long_long_array_from_stream(self, *args)
teca_long_long_array_swigregister = _teca_py_core.teca_long_long_array_swigregister
teca_long_long_array_swigregister(teca_long_long_array)

def teca_long_long_array_New(*args):
    return _teca_py_core.teca_long_long_array_New(*args)
teca_long_long_array_New = _teca_py_core.teca_long_long_array_New

class teca_unsigned_int_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_unsigned_int_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_unsigned_int_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_unsigned_int_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_unsigned_int_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_unsigned_int_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_unsigned_int_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_unsigned_int_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_unsigned_int_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_unsigned_int_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_unsigned_int_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_unsigned_int_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_unsigned_int_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_unsigned_int_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_unsigned_int_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_unsigned_int_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_unsigned_int_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_unsigned_int_array_from_stream(self, *args)
teca_unsigned_int_array_swigregister = _teca_py_core.teca_unsigned_int_array_swigregister
teca_unsigned_int_array_swigregister(teca_unsigned_int_array)

def teca_unsigned_int_array_New(*args):
    return _teca_py_core.teca_unsigned_int_array_New(*args)
teca_unsigned_int_array_New = _teca_py_core.teca_unsigned_int_array_New

class teca_unsigned_char_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_unsigned_char_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_unsigned_char_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_unsigned_char_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_unsigned_char_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_unsigned_char_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_unsigned_char_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_unsigned_char_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_unsigned_char_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_unsigned_char_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_unsigned_char_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_unsigned_char_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_unsigned_char_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_unsigned_char_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_unsigned_char_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_unsigned_char_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_unsigned_char_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_unsigned_char_array_from_stream(self, *args)
teca_unsigned_char_array_swigregister = _teca_py_core.teca_unsigned_char_array_swigregister
teca_unsigned_char_array_swigregister(teca_unsigned_char_array)

def teca_unsigned_char_array_New(*args):
    return _teca_py_core.teca_unsigned_char_array_New(*args)
teca_unsigned_char_array_New = _teca_py_core.teca_unsigned_char_array_New

class teca_unsigned_long_long_array(teca_variant_array):
    __swig_setmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_unsigned_long_long_array, name, value)
    __swig_getmethods__ = {}
    for _s in [teca_variant_array]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, teca_unsigned_long_long_array, name)
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _teca_py_core.teca_unsigned_long_long_array_New
    if _newclass:
        New = staticmethod(_teca_py_core.teca_unsigned_long_long_array_New)
    __swig_destroy__ = _teca_py_core.delete_teca_unsigned_long_long_array
    __del__ = lambda self: None

    def new_copy(self, *args):
        return _teca_py_core.teca_unsigned_long_long_array_new_copy(self, *args)

    def new_instance(self):
        return _teca_py_core.teca_unsigned_long_long_array_new_instance(self)

    def __init__(self, other):
        this = _teca_py_core.new_teca_unsigned_long_long_array(other)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _teca_py_core.teca_unsigned_long_long_array_get(self, *args)

    def size(self):
        return _teca_py_core.teca_unsigned_long_long_array_size(self)

    def resize(self, *args):
        return _teca_py_core.teca_unsigned_long_long_array_resize(self, *args)

    def reserve(self, n):
        return _teca_py_core.teca_unsigned_long_long_array_reserve(self, n)

    def clear(self):
        return _teca_py_core.teca_unsigned_long_long_array_clear(self)

    def swap(self, other):
        return _teca_py_core.teca_unsigned_long_long_array_swap(self, other)

    def equal(self, other):
        return _teca_py_core.teca_unsigned_long_long_array_equal(self, other)

    def to_stream(self, *args):
        return _teca_py_core.teca_unsigned_long_long_array_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_unsigned_long_long_array_from_stream(self, *args)
teca_unsigned_long_long_array_swigregister = _teca_py_core.teca_unsigned_long_long_array_swigregister
teca_unsigned_long_long_array_swigregister(teca_unsigned_long_long_array)

def teca_unsigned_long_long_array_New(*args):
    return _teca_py_core.teca_unsigned_long_long_array_New(*args)
teca_unsigned_long_long_array_New = _teca_py_core.teca_unsigned_long_long_array_New

class teca_metadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teca_metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teca_metadata, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _teca_py_core.delete_teca_metadata
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _teca_py_core.new_teca_metadata(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def size(self, name, size):
        return _teca_py_core.teca_metadata_size(self, name, size)

    def remove(self, name):
        return _teca_py_core.teca_metadata_remove(self, name)

    def clear(self):
        return _teca_py_core.teca_metadata_clear(self)

    def has(self, name):
        return _teca_py_core.teca_metadata_has(self, name)

    def empty(self):
        return _teca_py_core.teca_metadata_empty(self)

    def __nonzero__(self):
        return _teca_py_core.teca_metadata___nonzero__(self)
    __bool__ = __nonzero__



    def to_stream(self, *args):
        return _teca_py_core.teca_metadata_to_stream(self, *args)

    def from_stream(self, *args):
        return _teca_py_core.teca_metadata_from_stream(self, *args)

    def __str__(self):
        return _teca_py_core.teca_metadata___str__(self)

    def __setitem__(self, name, value):
        return _teca_py_core.teca_metadata___setitem__(self, name, value)

    def __getitem__(self, name):
        return _teca_py_core.teca_metadata___getitem__(self, name)
teca_metadata_swigregister = _teca_py_core.teca_metadata_swigregister
teca_metadata_swigregister(teca_metadata)

# This file is compatible with both classic and new-style classes.


